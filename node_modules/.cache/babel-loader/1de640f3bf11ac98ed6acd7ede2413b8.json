{"ast":null,"code":"import { TOGGLE_DIALOG, SELECT_SHOWTIMES, SELECT_ALL_SHOWTIMES, GET_SHOWTIMES, DELETE_SHOWTIME } from '../types';\nimport { setAlert } from './alert';\nexport const toggleDialog = () => ({\n  type: TOGGLE_DIALOG\n});\nexport const selectShowtime = showtime => ({\n  type: SELECT_SHOWTIMES,\n  payload: showtime\n});\nexport const selectAllShowtimes = () => ({\n  type: SELECT_ALL_SHOWTIMES\n});\nexport const getShowtimes = () => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/showtimes';\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const showtimes = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: GET_SHOWTIMES,\n        payload: showtimes\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const addShowtime = showtime => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/showtimes/';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(showtime)\n    });\n\n    if (response.ok) {\n      dispatch(setAlert('Showtime Created', 'success', 5000));\n      return {\n        status: 'success',\n        message: 'Showtime Created'\n      };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Cinema have not been saved, try again.'\n    };\n  }\n};\nexport const updateShowtime = (showtime, id) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/showtimes/' + id;\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(showtime)\n    });\n\n    if (response.ok) {\n      dispatch(setAlert('Showtime Created', 'success', 5000));\n      return {\n        status: 'success',\n        message: 'Showtime Created'\n      };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Cinema have not been saved, try again.'\n    };\n  }\n};\nexport const deleteShowtime = id => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/showtimes/' + id;\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.ok) {\n      dispatch({\n        type: DELETE_SHOWTIME,\n        payload: id\n      });\n      dispatch(setAlert('Showtime Deleted', 'success', 5000));\n      dispatch(getShowtimes());\n      return {\n        status: 'success',\n        message: 'Showtime Removed'\n      };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Showtime have not been deleted, try again.'\n    };\n  }\n};","map":{"version":3,"sources":["/Users/tainguyennguyen/Desktop/final-project/src/store/actions/showtimes.js"],"names":["TOGGLE_DIALOG","SELECT_SHOWTIMES","SELECT_ALL_SHOWTIMES","GET_SHOWTIMES","DELETE_SHOWTIME","setAlert","toggleDialog","type","selectShowtime","showtime","payload","selectAllShowtimes","getShowtimes","dispatch","token","localStorage","getItem","url","response","fetch","method","headers","Authorization","showtimes","json","ok","error","message","addShowtime","body","JSON","stringify","status","updateShowtime","id","deleteShowtime"],"mappings":"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","sourcesContent":["import {\n  TOGGLE_DIALOG,\n  SELECT_SHOWTIMES,\n  SELECT_ALL_SHOWTIMES,\n  GET_SHOWTIMES,\n  DELETE_SHOWTIME\n} from '../types';\nimport { setAlert } from './alert';\n\nexport const toggleDialog = () => ({ type: TOGGLE_DIALOG });\n\nexport const selectShowtime = showtime => ({\n  type: SELECT_SHOWTIMES,\n  payload: showtime\n});\n\nexport const selectAllShowtimes = () => ({ type: SELECT_ALL_SHOWTIMES });\n\nexport const getShowtimes = () => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/showtimes';\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const showtimes = await response.json();\n    if (response.ok) {\n      dispatch({ type: GET_SHOWTIMES, payload: showtimes });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const addShowtime = showtime => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/showtimes/';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(showtime)\n    });\n    if (response.ok) {\n      dispatch(setAlert('Showtime Created', 'success', 5000));\n      return { status: 'success', message: 'Showtime Created' };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Cinema have not been saved, try again.'\n    };\n  }\n};\n\nexport const updateShowtime = (showtime, id) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/showtimes/' + id;\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(showtime)\n    });\n    if (response.ok) {\n      dispatch(setAlert('Showtime Created', 'success', 5000));\n      return { status: 'success', message: 'Showtime Created' };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Cinema have not been saved, try again.'\n    };\n  }\n};\n\nexport const deleteShowtime = id => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/showtimes/' + id;\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      dispatch({ type: DELETE_SHOWTIME, payload: id });\n      dispatch(setAlert('Showtime Deleted', 'success', 5000));\n      dispatch(getShowtimes());\n      return { status: 'success', message: 'Showtime Removed' };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Showtime have not been deleted, try again.'\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}