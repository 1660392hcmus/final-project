{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from '../types';\nimport { setAlert } from './alert';\nimport { setAuthHeaders, setUser, removeUser, isLoggedIn } from '../../utils';\nexport const uploadImage = (id, image) => async dispatch => {\n  try {\n    const data = new FormData();\n    data.append('file', image);\n    const url = '/users/photo/' + id;\n    const response = await fetch(url, {\n      method: 'POST',\n      body: data\n    });\n    const responseData = await response.json();\n\n    if (response.ok) {\n      dispatch(setAlert('Image Uploaded', 'success', 5000));\n    }\n\n    if (responseData.error) {\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n}; // Login user\n\nexport const login = (username, password) => async dispatch => {\n  try {\n    const url = '/users/login';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const responseData = await response.json();\n\n    if (response.ok) {\n      const {\n        user\n      } = responseData;\n      user && setUser(user);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: responseData\n      });\n      dispatch(setAlert(`Welcome ${user.name}`, 'success', 5000));\n    }\n\n    if (responseData.error) {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const facebookLogin = e => async dispatch => {\n  try {\n    const {\n      email,\n      userID,\n      name\n    } = e;\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        userID,\n        name\n      })\n    };\n    const url = '/users/login/facebook';\n    const response = await fetch(url, options);\n    const responseData = await response.json();\n\n    if (response.ok) {\n      const {\n        user\n      } = responseData;\n      user && setUser(user);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: responseData\n      });\n      dispatch(setAlert(`Welcome ${user.name}`, 'success', 5000));\n    }\n\n    if (responseData.error) {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const googleLogin = ({\n  profileObj\n}) => async dispatch => {\n  try {\n    const {\n      email,\n      googleId,\n      name\n    } = profileObj;\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        googleId,\n        name\n      })\n    };\n    const url = '/users/login/google';\n    const response = await fetch(url, options);\n    const responseData = await response.json();\n\n    if (response.ok) {\n      const {\n        user\n      } = responseData;\n      user && setUser(user);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: responseData\n      });\n      dispatch(setAlert(`Welcome ${user.name}`, 'success', 5000));\n    }\n\n    if (responseData.error) {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n}; // Register user\n\nexport const register = ({\n  name,\n  username,\n  email,\n  phone,\n  image,\n  password\n}) => async dispatch => {\n  try {\n    const url = '/users';\n    const body = {\n      name,\n      username,\n      email,\n      phone,\n      password\n    };\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    const responseData = await response.json();\n\n    if (response.ok) {\n      const {\n        user\n      } = responseData;\n      user && setUser(user);\n      if (image) dispatch(uploadImage(user._id, image)); // Upload image\n\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: responseData\n      });\n      dispatch(setAlert('Register Success', 'success', 5000));\n    }\n\n    if (responseData._message) {\n      dispatch({\n        type: REGISTER_FAIL\n      });\n      dispatch(setAlert(responseData.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n}; // Load user\n\nexport const loadUser = () => async dispatch => {\n  if (!isLoggedIn()) return;\n\n  try {\n    const url = '/users/me';\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: setAuthHeaders()\n    });\n    const responseData = await response.json();\n\n    if (response.ok) {\n      const {\n        user\n      } = responseData;\n      user && setUser(user);\n      dispatch({\n        type: USER_LOADED,\n        payload: responseData\n      });\n    }\n\n    if (!response.ok) dispatch({\n      type: AUTH_ERROR\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Logout\n\nexport const logout = () => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/users/logout';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const responseData = await response.json();\n\n    if (response.ok) {\n      removeUser();\n      dispatch({\n        type: LOGOUT\n      });\n      dispatch(setAlert('LOGOUT Success', 'success', 5000));\n    }\n\n    if (responseData.error) {\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};","map":{"version":3,"sources":["/Users/tainguyennguyen/Desktop/final-project/src/store/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAlert","setAuthHeaders","setUser","removeUser","isLoggedIn","uploadImage","id","image","dispatch","data","FormData","append","url","response","fetch","method","body","responseData","json","ok","error","message","login","username","password","headers","JSON","stringify","user","type","payload","name","facebookLogin","e","email","userID","options","googleLogin","profileObj","googleId","register","phone","_id","_message","loadUser","logout","token","localStorage","getItem","Authorization"],"mappings":"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","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT\n} from '../types';\nimport { setAlert } from './alert';\nimport { setAuthHeaders, setUser, removeUser, isLoggedIn } from '../../utils';\n\nexport const uploadImage = (id, image) => async dispatch => {\n  try {\n    const data = new FormData();\n    data.append('file', image);\n    const url = '/users/photo/' + id;\n    const response = await fetch(url, {\n      method: 'POST',\n      body: data\n    });\n    const responseData = await response.json();\n    if (response.ok) {\n      dispatch(setAlert('Image Uploaded', 'success', 5000));\n    }\n    if (responseData.error) {\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\n// Login user\nexport const login = (username, password) => async dispatch => {\n  try {\n    const url = '/users/login';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password })\n    });\n    const responseData = await response.json();\n    if (response.ok) {\n      const { user } = responseData;\n      user && setUser(user);\n      dispatch({ type: LOGIN_SUCCESS, payload: responseData });\n      dispatch(setAlert(`Welcome ${user.name}`, 'success', 5000));\n    }\n    if (responseData.error) {\n      dispatch({ type: LOGIN_FAIL });\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch({ type: LOGIN_FAIL });\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const facebookLogin = e => async dispatch => {\n  try {\n    const { email, userID, name } = e;\n    const options = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, userID, name })\n    };\n    const url = '/users/login/facebook';\n    const response = await fetch(url, options);\n    const responseData = await response.json();\n\n    if (response.ok) {\n      const { user } = responseData;\n      user && setUser(user);\n      dispatch({ type: LOGIN_SUCCESS, payload: responseData });\n      dispatch(setAlert(`Welcome ${user.name}`, 'success', 5000));\n    }\n    if (responseData.error) {\n      dispatch({ type: LOGIN_FAIL });\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch({ type: LOGIN_FAIL });\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const googleLogin = ({ profileObj }) => async dispatch => {\n  try {\n    const { email, googleId, name } = profileObj;\n    const options = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, googleId, name })\n    };\n    const url = '/users/login/google';\n    const response = await fetch(url, options);\n    const responseData = await response.json();\n\n    if (response.ok) {\n      const { user } = responseData;\n      user && setUser(user);\n      dispatch({ type: LOGIN_SUCCESS, payload: responseData });\n      dispatch(setAlert(`Welcome ${user.name}`, 'success', 5000));\n    }\n    if (responseData.error) {\n      dispatch({ type: LOGIN_FAIL });\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch({ type: LOGIN_FAIL });\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\n// Register user\nexport const register = ({\n  name,\n  username,\n  email,\n  phone,\n  image,\n  password\n}) => async dispatch => {\n  try {\n    const url = '/users';\n    const body = { name, username, email, phone, password };\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body)\n    });\n    const responseData = await response.json();\n    if (response.ok) {\n      const { user } = responseData;\n      user && setUser(user);\n      if (image) dispatch(uploadImage(user._id, image)); // Upload image\n      dispatch({ type: REGISTER_SUCCESS, payload: responseData });\n      dispatch(setAlert('Register Success', 'success', 5000));\n    }\n    if (responseData._message) {\n      dispatch({ type: REGISTER_FAIL });\n      dispatch(setAlert(responseData.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch({ type: REGISTER_FAIL });\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\n// Load user\nexport const loadUser = () => async dispatch => {\n  if (!isLoggedIn()) return;\n  try {\n    const url = '/users/me';\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: setAuthHeaders()\n    });\n    const responseData = await response.json();\n    if (response.ok) {\n      const { user } = responseData;\n      user && setUser(user);\n      dispatch({ type: USER_LOADED, payload: responseData });\n    }\n    if (!response.ok) dispatch({ type: AUTH_ERROR });\n  } catch (error) {\n    dispatch({ type: AUTH_ERROR });\n  }\n};\n\n// Logout\nexport const logout = () => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/users/logout';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const responseData = await response.json();\n    if (response.ok) {\n      removeUser();\n      dispatch({ type: LOGOUT });\n      dispatch(setAlert('LOGOUT Success', 'success', 5000));\n    }\n    if (responseData.error) {\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}