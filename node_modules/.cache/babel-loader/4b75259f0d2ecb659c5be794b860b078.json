{"ast":null,"code":"import { GET_MOVIES, SELECT_MOVIE, GET_SUGGESTIONS } from '../types';\nimport { setAlert } from './alert';\nimport { movies as fakeData } from '../../fake-data';\nexport const uploadMovieImage = (id, image) => async dispatch => {\n  try {\n    const data = new FormData();\n    data.append('file', image);\n    const url = '/movies/photo/' + id;\n    const response = await fetch(url, {\n      method: 'POST',\n      body: data\n    });\n    const responseData = await response.json();\n\n    if (response.ok) {\n      dispatch(setAlert('Image Uploaded', 'success', 5000));\n    }\n\n    if (responseData.error) {\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const getMovies = () => async dispatch => {\n  try {\n    // const url = '/movies';\n    // const response = await fetch(url, {\n    //   method: 'GET',\n    //   headers: { 'Content-Type': 'application/json' }\n    // });\n    // const movies = await response.json();\n    // if (response.ok) {\n    //   dispatch({ type: GET_MOVIES, payload: movies });\n    // }\n    const movies = fakeData;\n    dispatch({\n      type: GET_MOVIES,\n      payload: movies\n    });\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const onSelectMovie = movie => ({\n  type: SELECT_MOVIE,\n  payload: movie\n});\nexport const getMovie = id => async dispatch => {\n  try {\n    const url = '/movies/' + id;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const movie = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: SELECT_MOVIE,\n        payload: movie\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const getMovieSuggestion = id => async dispatch => {\n  try {\n    const url = '/movies/usermodeling/' + id;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const movies = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: GET_SUGGESTIONS,\n        payload: movies\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const addMovie = (image, newMovie) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/movies';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newMovie)\n    });\n    const movie = await response.json();\n\n    if (response.ok) {\n      dispatch(setAlert('Movie have been saved!', 'success', 5000));\n      if (image) dispatch(uploadMovieImage(movie._id, image));\n      dispatch(getMovies());\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const updateMovie = (movieId, movie, image) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/movies/' + movieId;\n    const response = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(movie)\n    });\n\n    if (response.ok) {\n      dispatch(onSelectMovie(null));\n      dispatch(setAlert('Movie have been saved!', 'success', 5000));\n      if (image) dispatch(uploadMovieImage(movieId, image));\n      dispatch(getMovies());\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const removeMovie = movieId => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/movies/' + movieId;\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.ok) {\n      dispatch(getMovies());\n      dispatch(onSelectMovie(null));\n      dispatch(setAlert('Movie have been Deleted!', 'success', 5000));\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};","map":{"version":3,"sources":["/Users/tainguyennguyen/Desktop/final-project/src/store/actions/movies.js"],"names":["GET_MOVIES","SELECT_MOVIE","GET_SUGGESTIONS","setAlert","movies","fakeData","uploadMovieImage","id","image","dispatch","data","FormData","append","url","response","fetch","method","body","responseData","json","ok","error","message","getMovies","type","payload","onSelectMovie","movie","getMovie","headers","getMovieSuggestion","addMovie","newMovie","token","localStorage","getItem","Authorization","JSON","stringify","_id","updateMovie","movieId","removeMovie"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,EAAkCC,eAAlC,QAAyD,UAAzD;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,MAAM,IAAIC,QAAnB,QAAmC,iBAAnC;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,EAAD,EAAKC,KAAL,KAAe,MAAMC,QAAN,IAAkB;AAC/D,MAAI;AACF,UAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAD,IAAAA,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoBJ,KAApB;AACA,UAAMK,GAAG,GAAG,mBAAmBN,EAA/B;AACA,UAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAChCG,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,IAAI,EAAEP;AAF0B,KAAN,CAA5B;AAIA,UAAMQ,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;;AACA,QAAIL,QAAQ,CAACM,EAAb,EAAiB;AACfX,MAAAA,QAAQ,CAACN,QAAQ,CAAC,gBAAD,EAAmB,SAAnB,EAA8B,IAA9B,CAAT,CAAR;AACD;;AACD,QAAIe,YAAY,CAACG,KAAjB,EAAwB;AACtBZ,MAAAA,QAAQ,CAACN,QAAQ,CAACe,YAAY,CAACG,KAAb,CAAmBC,OAApB,EAA6B,OAA7B,EAAsC,IAAtC,CAAT,CAAR;AACD;AACF,GAfD,CAeE,OAAOD,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAACN,QAAQ,CAACkB,KAAK,CAACC,OAAP,EAAgB,OAAhB,EAAyB,IAAzB,CAAT,CAAR;AACD;AACF,CAnBM;AAqBP,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAMd,QAAN,IAAkB;AAC/C,MAAI;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAML,MAAM,GAAGC,QAAf;AACAI,IAAAA,QAAQ,CAAC;AAAEe,MAAAA,IAAI,EAAExB,UAAR;AAAoByB,MAAAA,OAAO,EAAErB;AAA7B,KAAD,CAAR;AACD,GAZD,CAYE,OAAOiB,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAACN,QAAQ,CAACkB,KAAK,CAACC,OAAP,EAAgB,OAAhB,EAAyB,IAAzB,CAAT,CAAR;AACD;AACF,CAhBM;AAkBP,OAAO,MAAMI,aAAa,GAAGC,KAAK,KAAK;AACrCH,EAAAA,IAAI,EAAEvB,YAD+B;AAErCwB,EAAAA,OAAO,EAAEE;AAF4B,CAAL,CAA3B;AAKP,OAAO,MAAMC,QAAQ,GAAGrB,EAAE,IAAI,MAAME,QAAN,IAAkB;AAC9C,MAAI;AACF,UAAMI,GAAG,GAAG,aAAaN,EAAzB;AACA,UAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAChCG,MAAAA,MAAM,EAAE,KADwB;AAEhCa,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFuB,KAAN,CAA5B;AAIA,UAAMF,KAAK,GAAG,MAAMb,QAAQ,CAACK,IAAT,EAApB;;AACA,QAAIL,QAAQ,CAACM,EAAb,EAAiB;AACfX,MAAAA,QAAQ,CAAC;AAAEe,QAAAA,IAAI,EAAEvB,YAAR;AAAsBwB,QAAAA,OAAO,EAAEE;AAA/B,OAAD,CAAR;AACD;AACF,GAVD,CAUE,OAAON,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAACN,QAAQ,CAACkB,KAAK,CAACC,OAAP,EAAgB,OAAhB,EAAyB,IAAzB,CAAT,CAAR;AACD;AACF,CAdM;AAgBP,OAAO,MAAMQ,kBAAkB,GAAGvB,EAAE,IAAI,MAAME,QAAN,IAAkB;AACxD,MAAI;AACF,UAAMI,GAAG,GAAG,0BAA0BN,EAAtC;AACA,UAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAChCG,MAAAA,MAAM,EAAE,KADwB;AAEhCa,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFuB,KAAN,CAA5B;AAIA,UAAMzB,MAAM,GAAG,MAAMU,QAAQ,CAACK,IAAT,EAArB;;AACA,QAAIL,QAAQ,CAACM,EAAb,EAAiB;AACfX,MAAAA,QAAQ,CAAC;AAAEe,QAAAA,IAAI,EAAEtB,eAAR;AAAyBuB,QAAAA,OAAO,EAAErB;AAAlC,OAAD,CAAR;AACD;AACF,GAVD,CAUE,OAAOiB,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAACN,QAAQ,CAACkB,KAAK,CAACC,OAAP,EAAgB,OAAhB,EAAyB,IAAzB,CAAT,CAAR;AACD;AACF,CAdM;AAgBP,OAAO,MAAMS,QAAQ,GAAG,CAACvB,KAAD,EAAQwB,QAAR,KAAqB,MAAMvB,QAAN,IAAkB;AAC7D,MAAI;AACF,UAAMwB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd;AACA,UAAMtB,GAAG,GAAG,SAAZ;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAChCG,MAAAA,MAAM,EAAE,MADwB;AAEhCa,MAAAA,OAAO,EAAE;AACPO,QAAAA,aAAa,EAAG,UAASH,KAAM,EADxB;AAEP,wBAAgB;AAFT,OAFuB;AAMhChB,MAAAA,IAAI,EAAEoB,IAAI,CAACC,SAAL,CAAeN,QAAf;AAN0B,KAAN,CAA5B;AAQA,UAAML,KAAK,GAAG,MAAMb,QAAQ,CAACK,IAAT,EAApB;;AACA,QAAIL,QAAQ,CAACM,EAAb,EAAiB;AACfX,MAAAA,QAAQ,CAACN,QAAQ,CAAC,wBAAD,EAA2B,SAA3B,EAAsC,IAAtC,CAAT,CAAR;AACA,UAAIK,KAAJ,EAAWC,QAAQ,CAACH,gBAAgB,CAACqB,KAAK,CAACY,GAAP,EAAY/B,KAAZ,CAAjB,CAAR;AACXC,MAAAA,QAAQ,CAACc,SAAS,EAAV,CAAR;AACD;AACF,GAjBD,CAiBE,OAAOF,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAACN,QAAQ,CAACkB,KAAK,CAACC,OAAP,EAAgB,OAAhB,EAAyB,IAAzB,CAAT,CAAR;AACD;AACF,CArBM;AAuBP,OAAO,MAAMkB,WAAW,GAAG,CAACC,OAAD,EAAUd,KAAV,EAAiBnB,KAAjB,KAA2B,MAAMC,QAAN,IAAkB;AACtE,MAAI;AACF,UAAMwB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd;AACA,UAAMtB,GAAG,GAAG,aAAa4B,OAAzB;AACA,UAAM3B,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAChCG,MAAAA,MAAM,EAAE,KADwB;AAEhCa,MAAAA,OAAO,EAAE;AACPO,QAAAA,aAAa,EAAG,UAASH,KAAM,EADxB;AAEP,wBAAgB;AAFT,OAFuB;AAMhChB,MAAAA,IAAI,EAAEoB,IAAI,CAACC,SAAL,CAAeX,KAAf;AAN0B,KAAN,CAA5B;;AAQA,QAAIb,QAAQ,CAACM,EAAb,EAAiB;AACfX,MAAAA,QAAQ,CAACiB,aAAa,CAAC,IAAD,CAAd,CAAR;AACAjB,MAAAA,QAAQ,CAACN,QAAQ,CAAC,wBAAD,EAA2B,SAA3B,EAAsC,IAAtC,CAAT,CAAR;AACA,UAAIK,KAAJ,EAAWC,QAAQ,CAACH,gBAAgB,CAACmC,OAAD,EAAUjC,KAAV,CAAjB,CAAR;AACXC,MAAAA,QAAQ,CAACc,SAAS,EAAV,CAAR;AACD;AACF,GAjBD,CAiBE,OAAOF,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAACN,QAAQ,CAACkB,KAAK,CAACC,OAAP,EAAgB,OAAhB,EAAyB,IAAzB,CAAT,CAAR;AACD;AACF,CArBM;AAuBP,OAAO,MAAMoB,WAAW,GAAGD,OAAO,IAAI,MAAMhC,QAAN,IAAkB;AACtD,MAAI;AACF,UAAMwB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd;AACA,UAAMtB,GAAG,GAAG,aAAa4B,OAAzB;AACA,UAAM3B,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAChCG,MAAAA,MAAM,EAAE,QADwB;AAEhCa,MAAAA,OAAO,EAAE;AACPO,QAAAA,aAAa,EAAG,UAASH,KAAM,EADxB;AAEP,wBAAgB;AAFT;AAFuB,KAAN,CAA5B;;AAOA,QAAInB,QAAQ,CAACM,EAAb,EAAiB;AACfX,MAAAA,QAAQ,CAACc,SAAS,EAAV,CAAR;AACAd,MAAAA,QAAQ,CAACiB,aAAa,CAAC,IAAD,CAAd,CAAR;AACAjB,MAAAA,QAAQ,CAACN,QAAQ,CAAC,0BAAD,EAA6B,SAA7B,EAAwC,IAAxC,CAAT,CAAR;AACD;AACF,GAfD,CAeE,OAAOkB,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAACN,QAAQ,CAACkB,KAAK,CAACC,OAAP,EAAgB,OAAhB,EAAyB,IAAzB,CAAT,CAAR;AACD;AACF,CAnBM","sourcesContent":["import { GET_MOVIES, SELECT_MOVIE,GET_SUGGESTIONS } from '../types';\nimport { setAlert } from './alert';\nimport { movies as fakeData } from '../../fake-data'; \n\nexport const uploadMovieImage = (id, image) => async dispatch => {\n  try {\n    const data = new FormData();\n    data.append('file', image);\n    const url = '/movies/photo/' + id;\n    const response = await fetch(url, {\n      method: 'POST',\n      body: data\n    });\n    const responseData = await response.json();\n    if (response.ok) {\n      dispatch(setAlert('Image Uploaded', 'success', 5000));\n    }\n    if (responseData.error) {\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const getMovies = () => async dispatch => {\n  try {\n    // const url = '/movies';\n    // const response = await fetch(url, {\n    //   method: 'GET',\n    //   headers: { 'Content-Type': 'application/json' }\n    // });\n    // const movies = await response.json();\n    // if (response.ok) {\n    //   dispatch({ type: GET_MOVIES, payload: movies });\n    // }\n    const movies = fakeData;\n    dispatch({ type: GET_MOVIES, payload: movies });\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const onSelectMovie = movie => ({\n  type: SELECT_MOVIE,\n  payload: movie\n});\n\nexport const getMovie = id => async dispatch => {\n  try {\n    const url = '/movies/' + id;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n    const movie = await response.json();\n    if (response.ok) {\n      dispatch({ type: SELECT_MOVIE, payload: movie });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const getMovieSuggestion = id => async dispatch => {\n  try {\n    const url = '/movies/usermodeling/' + id;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n    const movies = await response.json();\n    if (response.ok) {\n      dispatch({ type: GET_SUGGESTIONS, payload: movies });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const addMovie = (image, newMovie) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/movies';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newMovie)\n    });\n    const movie = await response.json();\n    if (response.ok) {\n      dispatch(setAlert('Movie have been saved!', 'success', 5000));\n      if (image) dispatch(uploadMovieImage(movie._id, image));\n      dispatch(getMovies());\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const updateMovie = (movieId, movie, image) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/movies/' + movieId;\n    const response = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(movie)\n    });\n    if (response.ok) {\n      dispatch(onSelectMovie(null));\n      dispatch(setAlert('Movie have been saved!', 'success', 5000));\n      if (image) dispatch(uploadMovieImage(movieId, image));\n      dispatch(getMovies());\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const removeMovie = movieId => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/movies/' + movieId;\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      dispatch(getMovies());\n      dispatch(onSelectMovie(null));\n      dispatch(setAlert('Movie have been Deleted!', 'success', 5000));\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}