{"ast":null,"code":"import { GET_MOVIES, SELECT_MOVIE, GET_SUGGESTIONS } from '../types';\nconst initialState = {\n  movies: [],\n  randomMovie: null,\n  latestMovies: [],\n  nowShowing: [],\n  comingSoon: [],\n  selectedMovie: null,\n  suggested: []\n};\n\nconst getMovies = (state, payload) => {\n  const latestMovies = payload.sort((a, b) => Date.parse(b.releaseDate) - Date.parse(a.releaseDate)).slice(0, 5);\n  const nowShowing = payload.filter(movie => new Date(movie.endDate) >= new Date() && new Date(movie.releaseDate) < new Date());\n  const comingSoon = payload.filter(movie => new Date(movie.releaseDate) > new Date());\n  return { ...state,\n    movies: payload,\n    randomMovie: payload[Math.floor(Math.random() * payload.length)],\n    latestMovies,\n    nowShowing,\n    comingSoon\n  };\n};\n\nconst onSelectMovie = (state, payload) => ({ ...state,\n  selectedMovie: payload\n});\n\nconst getMovieSuggestions = (state, payload) => ({ ...state,\n  suggested: payload\n});\n\nexport default ((state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_MOVIES:\n      return getMovies(state, payload);\n\n    case SELECT_MOVIE:\n      return onSelectMovie(state, payload);\n\n    case GET_SUGGESTIONS:\n      return getMovieSuggestions(state, payload);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/tainguyennguyen/Desktop/final-project/src/store/reducers/movies.js"],"names":["GET_MOVIES","SELECT_MOVIE","GET_SUGGESTIONS","initialState","movies","randomMovie","latestMovies","nowShowing","comingSoon","selectedMovie","suggested","getMovies","state","payload","sort","a","b","Date","parse","releaseDate","slice","filter","movie","endDate","Math","floor","random","length","onSelectMovie","getMovieSuggestions","action","type"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,EAAkCC,eAAlC,QAAyD,UAAzD;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,WAAW,EAAE,IAFM;AAGnBC,EAAAA,YAAY,EAAE,EAHK;AAInBC,EAAAA,UAAU,EAAE,EAJO;AAKnBC,EAAAA,UAAU,EAAE,EALO;AAMnBC,EAAAA,aAAa,EAAE,IANI;AAOnBC,EAAAA,SAAS,EAAC;AAPS,CAArB;;AAUA,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACpC,QAAMP,YAAY,GAAGO,OAAO,CACzBC,IADkB,CACb,CAACC,CAAD,EAAIC,CAAJ,KAAUC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACG,WAAb,IAA4BF,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,WAAb,CADzB,EAElBC,KAFkB,CAEZ,CAFY,EAET,CAFS,CAArB;AAIA,QAAMb,UAAU,GAAGM,OAAO,CAACQ,MAAR,CACjBC,KAAK,IACH,IAAIL,IAAJ,CAASK,KAAK,CAACC,OAAf,KAA2B,IAAIN,IAAJ,EAA3B,IACA,IAAIA,IAAJ,CAASK,KAAK,CAACH,WAAf,IAA8B,IAAIF,IAAJ,EAHf,CAAnB;AAMA,QAAMT,UAAU,GAAGK,OAAO,CAACQ,MAAR,CACjBC,KAAK,IAAI,IAAIL,IAAJ,CAASK,KAAK,CAACH,WAAf,IAA8B,IAAIF,IAAJ,EADtB,CAAnB;AAIA,SAAO,EACL,GAAGL,KADE;AAELR,IAAAA,MAAM,EAAES,OAFH;AAGLR,IAAAA,WAAW,EAAEQ,OAAO,CAACW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,OAAO,CAACc,MAAnC,CAAD,CAHf;AAILrB,IAAAA,YAJK;AAKLC,IAAAA,UALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CAvBD;;AAyBA,MAAMoB,aAAa,GAAG,CAAChB,KAAD,EAAQC,OAAR,MAAqB,EACzC,GAAGD,KADsC;AAEzCH,EAAAA,aAAa,EAAEI;AAF0B,CAArB,CAAtB;;AAKA,MAAMgB,mBAAmB,GAAG,CAACjB,KAAD,EAAQC,OAAR,MAAoB,EAC9C,GAAGD,KAD2C;AAE9CF,EAAAA,SAAS,EAAEG;AAFmC,CAApB,CAA5B;;AAKA,gBAAe,CAACD,KAAK,GAAGT,YAAT,EAAuB2B,MAAvB,KAAkC;AAC/C,QAAM;AAAEC,IAAAA,IAAF;AAAQlB,IAAAA;AAAR,MAAoBiB,MAA1B;;AAEA,UAAQC,IAAR;AACE,SAAK/B,UAAL;AACE,aAAOW,SAAS,CAACC,KAAD,EAAQC,OAAR,CAAhB;;AACF,SAAKZ,YAAL;AACE,aAAO2B,aAAa,CAAChB,KAAD,EAAQC,OAAR,CAApB;;AACF,SAAKX,eAAL;AACE,aAAO2B,mBAAmB,CAACjB,KAAD,EAAQC,OAAR,CAA1B;;AACF;AACE,aAAOD,KAAP;AARJ;AAUD,CAbD","sourcesContent":["import { GET_MOVIES, SELECT_MOVIE,GET_SUGGESTIONS } from '../types';\n\nconst initialState = {\n  movies: [],\n  randomMovie: null,\n  latestMovies: [],\n  nowShowing: [],\n  comingSoon: [],\n  selectedMovie: null,\n  suggested:[]\n};\n\nconst getMovies = (state, payload) => {\n  const latestMovies = payload\n    .sort((a, b) => Date.parse(b.releaseDate) - Date.parse(a.releaseDate))\n    .slice(0, 5);\n\n  const nowShowing = payload.filter(\n    movie =>\n      new Date(movie.endDate) >= new Date() &&\n      new Date(movie.releaseDate) < new Date()\n  );\n\n  const comingSoon = payload.filter(\n    movie => new Date(movie.releaseDate) > new Date()\n  );\n\n  return {\n    ...state,\n    movies: payload,\n    randomMovie: payload[Math.floor(Math.random() * payload.length)],\n    latestMovies,\n    nowShowing,\n    comingSoon\n  };\n};\n\nconst onSelectMovie = (state, payload) => ({\n  ...state,\n  selectedMovie: payload\n});\n\nconst getMovieSuggestions = (state, payload) =>({\n  ...state,\n  suggested: payload\n})\n\nexport default (state = initialState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_MOVIES:\n      return getMovies(state, payload);\n    case SELECT_MOVIE:\n      return onSelectMovie(state, payload);\n    case GET_SUGGESTIONS:\n      return getMovieSuggestions(state, payload);\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}