{"ast":null,"code":"import { GET_RESERVATIONS, GET_RESERVATION_SUGGESTED_SEATS } from '../types';\nimport { setAlert } from './alert';\nexport const getReservations = () => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/reservations';\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const reservations = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: GET_RESERVATIONS,\n        payload: reservations\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const getSuggestedReservationSeats = username => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/reservations/usermodeling/' + username;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const reservationSeats = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: GET_RESERVATION_SUGGESTED_SEATS,\n        payload: reservationSeats\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const addReservation = reservation => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/reservations';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(reservation)\n    });\n\n    if (response.ok) {\n      const {\n        reservation,\n        QRCode\n      } = await response.json();\n      dispatch(setAlert('Reservation Created', 'success', 5000));\n      return {\n        status: 'success',\n        message: 'Reservation Created',\n        data: {\n          reservation,\n          QRCode\n        }\n      };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Reservation have not been created, try again.'\n    };\n  }\n};\nexport const updateReservation = (reservation, id) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/reservations/' + id;\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(reservation)\n    });\n\n    if (response.ok) {\n      dispatch(setAlert('Reservation Updated', 'success', 5000));\n      return {\n        status: 'success',\n        message: 'Reservation Updated'\n      };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Reservation have not been updated, try again.'\n    };\n  }\n};\nexport const removeReservation = id => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/reservations/' + id;\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.ok) {\n      dispatch(setAlert('Reservation Deleted', 'success', 5000));\n      return {\n        status: 'success',\n        message: 'Reservation Removed'\n      };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Reservation have not been deleted, try again.'\n    };\n  }\n};","map":{"version":3,"sources":["/Users/tainguyennguyen/Desktop/final-project/src/store/actions/reservations.js"],"names":["GET_RESERVATIONS","GET_RESERVATION_SUGGESTED_SEATS","setAlert","getReservations","dispatch","token","localStorage","getItem","url","response","fetch","method","headers","Authorization","reservations","json","ok","type","payload","error","message","getSuggestedReservationSeats","username","reservationSeats","addReservation","reservation","body","JSON","stringify","QRCode","status","data","updateReservation","id","removeReservation"],"mappings":"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","sourcesContent":["import { GET_RESERVATIONS, GET_RESERVATION_SUGGESTED_SEATS } from '../types';\nimport { setAlert } from './alert';\n\nexport const getReservations = () => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/reservations';\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const reservations = await response.json();\n    if (response.ok) {\n      dispatch({ type: GET_RESERVATIONS, payload: reservations });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const getSuggestedReservationSeats = username => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/reservations/usermodeling/' + username;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const reservationSeats = await response.json();\n    if (response.ok) {\n      dispatch({\n        type: GET_RESERVATION_SUGGESTED_SEATS,\n        payload: reservationSeats\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const addReservation = reservation => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/reservations';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(reservation)\n    });\n    if (response.ok) {\n      const { reservation, QRCode } = await response.json();\n      dispatch(setAlert('Reservation Created', 'success', 5000));\n      return {\n        status: 'success',\n        message: 'Reservation Created',\n        data: { reservation, QRCode }\n      };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Reservation have not been created, try again.'\n    };\n  }\n};\n\nexport const updateReservation = (reservation, id) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/reservations/' + id;\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(reservation)\n    });\n    if (response.ok) {\n      dispatch(setAlert('Reservation Updated', 'success', 5000));\n      return { status: 'success', message: 'Reservation Updated' };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Reservation have not been updated, try again.'\n    };\n  }\n};\n\nexport const removeReservation = id => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/reservations/' + id;\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      dispatch(setAlert('Reservation Deleted', 'success', 5000));\n      return { status: 'success', message: 'Reservation Removed' };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Reservation have not been deleted, try again.'\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}