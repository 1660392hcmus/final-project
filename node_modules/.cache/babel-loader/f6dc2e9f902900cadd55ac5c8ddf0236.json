{"ast":null,"code":"var _jsxFileName = \"/Users/tainguyennguyen/Desktop/final-project/src/pages/Public/BookingPage/BookingPage.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles, Grid, Container } from '@material-ui/core';\nimport { getMovie, getCinemasUserModeling, getCinema, getCinemas, getShowtimes, getReservations, getSuggestedReservationSeats, setSelectedSeats, setSelectedCinema, setSelectedDate, setSelectedTime, setInvitation, toggleLoginPopup, showInvitationForm, resetCheckout, setAlert, addReservation, setSuggestedSeats, setQRCode } from '../../../store/actions';\nimport { ResponsiveDialog } from '../../../components';\nimport LoginForm from '../Login/components/LoginForm';\nimport styles from './styles';\nimport MovieInfo from './components/MovieInfo/MovieInfo';\nimport BookingForm from './components/BookingForm/BookingForm';\nimport BookingSeats from './components/BookingSeats/BookingSeats';\nimport BookingCheckout from './components/BookingCheckout/BookingCheckout';\nimport BookingInvitation from './components/BookingInvitation/BookingInvitation';\nimport jsPDF from 'jspdf';\n\nclass BookingPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.didSetSuggestion = false;\n\n    this.jsPdfGenerator = () => {\n      const {\n        movie,\n        cinema,\n        selectedDate,\n        selectedTime,\n        QRCode\n      } = this.props;\n      const doc = new jsPDF();\n      doc.setFont('helvetica');\n      doc.setFontType('bold');\n      doc.setFontSize(22);\n      doc.text(movie.title, 20, 20);\n      doc.setFontSize(16);\n      doc.text(cinema.name, 20, 30);\n      doc.text(`Date: ${new Date(selectedDate).toLocaleDateString()} - Time: ${selectedTime}`, 20, 40);\n      doc.addImage(QRCode, 'JPEG', 15, 40, 160, 160);\n      doc.save(`${movie.title}-${cinema.name}.pdf`);\n    };\n\n    this.onSelectSeat = (row, seat) => {\n      const {\n        cinema,\n        setSelectedSeats\n      } = this.props;\n      const seats = [...cinema.seats];\n      const newSeats = [...seats];\n\n      if (seats[row][seat] === 1) {\n        newSeats[row][seat] = 1;\n      } else if (seats[row][seat] === 2) {\n        newSeats[row][seat] = 0;\n      } else if (seats[row][seat] === 3) {\n        newSeats[row][seat] = 2;\n      } else {\n        newSeats[row][seat] = 2;\n      }\n\n      setSelectedSeats([row, seat]);\n    };\n\n    this.onGetReservedSeats = () => {\n      const {\n        reservations,\n        cinema,\n        selectedDate,\n        selectedTime\n      } = this.props;\n      if (!cinema) return [];\n      const newSeats = [...cinema.seats];\n      const filteredReservations = reservations.filter(reservation => new Date(reservation.date).toLocaleDateString() === new Date(selectedDate).toLocaleDateString() && reservation.startAt === selectedTime);\n\n      if (filteredReservations.length && selectedDate && selectedTime) {\n        const reservedSeats = filteredReservations.map(reservation => reservation.seats).reduce((a, b) => a.concat(b));\n        reservedSeats.forEach(([row, seat]) => newSeats[row][seat] = 1);\n        return newSeats;\n      }\n\n      return newSeats;\n    };\n\n    this.onGetSuggestedSeats = (seats, suggestedSeats) => {\n      const {\n        numberOfTickets,\n        positions\n      } = suggestedSeats;\n      const positionsArray = Object.keys(positions).map(key => {\n        return [String(key), positions[key]];\n      });\n      positionsArray.sort((a, b) => {\n        return b[1] - a[1];\n      });\n      if (positionsArray.every(position => position[1] === 0)) return;\n      const step = Math.round(seats.length / 3);\n      let indexArr = [];\n      let suggested;\n\n      for (let position of positionsArray) {\n        switch (position[0]) {\n          case 'front':\n            indexArr = [0, step];\n            suggested = this.checkSeats(indexArr, seats, numberOfTickets);\n            break;\n\n          case 'center':\n            indexArr = [step, step * 2];\n            suggested = this.checkSeats(indexArr, seats, numberOfTickets);\n            break;\n\n          case 'back':\n            indexArr = [step * 2, step * 3];\n            suggested = this.checkSeats(indexArr, seats, numberOfTickets);\n            break;\n\n          default:\n            break;\n        }\n\n        if (suggested) this.getSeat(suggested, seats, numberOfTickets);\n        break;\n      }\n    };\n\n    this.checkSeats = (indexArr, seats, numberOfTickets) => {\n      for (let i = indexArr[0]; i < indexArr[1]; i++) {\n        for (let seat in seats[i]) {\n          let seatNum = Number(seat);\n\n          if (!seats[i][seatNum] && seatNum + (numberOfTickets - 1) <= seats[i].length) {\n            let statusAvailability = [];\n\n            for (let y = 1; y < numberOfTickets; y++) {\n              //check the next seat if available\n              if (!seats[i][seatNum + y]) {\n                statusAvailability.push(true);\n              } else {\n                statusAvailability.push(false);\n              }\n            }\n\n            if (statusAvailability.every(Boolean)) return [i, seatNum];\n          }\n        }\n      }\n\n      return null;\n    };\n\n    this.getSeat = (suggested, seats, numberOfTickets) => {\n      const {\n        setSuggestedSeats\n      } = this.props;\n\n      for (let i = suggested[1]; i < suggested[1] + numberOfTickets; i++) {\n        const seat = [suggested[0], i];\n        setSuggestedSeats(seat);\n      }\n    };\n\n    this.onChangeCinema = event => this.props.setSelectedCinema(event.target.value);\n\n    this.onChangeDate = date => this.props.setSelectedDate(date);\n\n    this.onChangeTime = event => this.props.setSelectedTime(event.target.value);\n\n    this.sendInvitations = async () => {\n      const invitations = this.createInvitations();\n      if (!invitations) return;\n\n      try {\n        const token = localStorage.getItem('jwtToken');\n        const url = '/invitations';\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(invitations)\n        });\n\n        if (response.ok) {\n          this.props.resetCheckout();\n          this.props.setAlert('invitations Send', 'success', 5000);\n          return {\n            status: 'success',\n            message: 'invitations Send'\n          };\n        }\n      } catch (error) {\n        this.props.setAlert(error.message, 'error', 5000);\n        return {\n          status: 'error',\n          message: ' invitations have not send, try again.'\n        };\n      }\n    };\n\n    this.createInvitations = () => {\n      const {\n        user,\n        movie,\n        cinema,\n        selectedDate,\n        selectedTime,\n        invitations\n      } = this.props;\n      const invArray = Object.keys(invitations).map(key => ({\n        to: invitations[key],\n        host: user.name,\n        movie: movie.title,\n        time: selectedTime,\n        date: new Date(selectedDate).toDateString(),\n        cinema: cinema.name,\n        image: cinema.image,\n        seat: key\n      })).filter(inv => inv.to !== '');\n      return invArray;\n    };\n\n    this.setSuggestionSeats = (seats, suggestedSeats) => {\n      suggestedSeats.forEach(suggestedSeat => {\n        seats[suggestedSeat[0]][suggestedSeat[1]] = 3;\n      });\n      return seats;\n    };\n  }\n\n  componentDidMount() {\n    const {\n      user,\n      match,\n      getMovie,\n      getCinemas,\n      getCinemasUserModeling,\n      getShowtimes,\n      getReservations,\n      getSuggestedReservationSeats\n    } = this.props;\n    getMovie(match.params.id);\n    user ? getCinemasUserModeling(user.username) : getCinemas();\n    getShowtimes();\n    getReservations();\n    if (user) getSuggestedReservationSeats(user.username);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      selectedCinema,\n      selectedDate,\n      getCinema\n    } = this.props;\n\n    if (selectedCinema && prevProps.selectedCinema !== selectedCinema || selectedCinema && prevProps.selectedDate !== selectedDate) {\n      getCinema(selectedCinema);\n    }\n  } // JSpdf Generator For generating the PDF\n\n\n  async checkout() {\n    const {\n      movie,\n      cinema,\n      selectedSeats,\n      selectedDate,\n      selectedTime,\n      getReservations,\n      isAuth,\n      user,\n      addReservation,\n      toggleLoginPopup,\n      showInvitationForm,\n      setQRCode\n    } = this.props;\n    if (selectedSeats.length === 0) return;\n    if (!isAuth) return toggleLoginPopup();\n    const response = await addReservation({\n      date: selectedDate,\n      startAt: selectedTime,\n      seats: this.bookSeats(),\n      ticketPrice: cinema.ticketPrice,\n      total: selectedSeats.length * cinema.ticketPrice,\n      movieId: movie._id,\n      cinemaId: cinema._id,\n      username: user.username,\n      phone: user.phone\n    });\n\n    if (response.status === 'success') {\n      const {\n        data\n      } = response;\n      setQRCode(data.QRCode);\n      getReservations();\n      showInvitationForm();\n    }\n  }\n\n  bookSeats() {\n    const {\n      cinema,\n      selectedSeats\n    } = this.props;\n    const seats = [...cinema.seats];\n    if (selectedSeats.length === 0) return;\n    const bookedSeats = seats.map(row => row.map((seat, i) => seat === 2 ? i : -1).filter(seat => seat !== -1)).map((seats, i) => seats.length ? seats.map(seat => [i, seat]) : -1).filter(seat => seat !== -1).reduce((a, b) => a.concat(b));\n    return bookedSeats;\n  }\n\n  onFilterCinema() {\n    const {\n      cinemas,\n      showtimes,\n      selectedCinema,\n      selectedTime\n    } = this.props;\n    const initialReturn = {\n      uniqueCinemas: [],\n      uniqueTimes: []\n    };\n    if (!showtimes || !cinemas) return initialReturn;\n    const uniqueCinemasId = showtimes.filter(showtime => selectedTime ? showtime.startAt === selectedTime : true).map(showtime => showtime.cinemaId).filter((value, index, self) => self.indexOf(value) === index);\n    const uniqueCinemas = cinemas.filter(cinema => uniqueCinemasId.includes(cinema._id));\n    const uniqueTimes = showtimes.filter(showtime => selectedCinema ? selectedCinema === showtime.cinemaId : true).map(showtime => showtime.startAt).filter((value, index, self) => self.indexOf(value) === index).sort((a, b) => new Date('1970/01/01 ' + a) - new Date('1970/01/01 ' + b));\n    return { ...initialReturn,\n      uniqueCinemas,\n      uniqueTimes\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      user,\n      movie,\n      cinema,\n      showtimes,\n      selectedSeats,\n      selectedCinema,\n      selectedDate,\n      selectedTime,\n      showLoginPopup,\n      toggleLoginPopup,\n      showInvitation,\n      invitations,\n      setInvitation,\n      resetCheckout,\n      suggestedSeats,\n      suggestedSeat\n    } = this.props;\n    const {\n      uniqueCinemas,\n      uniqueTimes\n    } = this.onFilterCinema();\n    let seats = this.onGetReservedSeats();\n\n    if (suggestedSeats && selectedTime && !suggestedSeat.length) {\n      this.onGetSuggestedSeats(seats, suggestedSeats);\n    }\n\n    if (suggestedSeat.length && !this.didSetSuggestion) {\n      seats = this.setSuggestionSeats(seats, suggestedSeat);\n      this.didSetSuggestion = true;\n    }\n\n    return /*#__PURE__*/React.createElement(Container, {\n      maxWidth: \"xl\",\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MovieInfo, {\n      movie: movie,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      lg: 9,\n      xs: 12,\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(BookingForm, {\n      cinemas: uniqueCinemas,\n      times: uniqueTimes,\n      showtimes: showtimes,\n      selectedCinema: selectedCinema,\n      selectedDate: selectedDate,\n      selectedTime: selectedTime,\n      onChangeCinema: this.onChangeCinema,\n      onChangeDate: this.onChangeDate,\n      onChangeTime: this.onChangeTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 13\n      }\n    }), showInvitation && !!selectedSeats.length && /*#__PURE__*/React.createElement(BookingInvitation, {\n      selectedSeats: selectedSeats,\n      sendInvitations: this.sendInvitations,\n      ignore: resetCheckout,\n      invitations: invitations,\n      onSetInvitation: setInvitation,\n      onDownloadPDF: this.jsPdfGenerator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 15\n      }\n    }), cinema && selectedCinema && selectedTime && !showInvitation && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BookingSeats, {\n      seats: seats,\n      onSelectSeat: (indexRow, index) => this.onSelectSeat(indexRow, index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(BookingCheckout, {\n      user: user,\n      ticketPrice: cinema.ticketPrice,\n      seatsAvailable: cinema.seatsAvailable,\n      selectedSeats: selectedSeats.length,\n      onBookSeats: () => this.checkout(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(ResponsiveDialog, {\n      id: \"Edit-cinema\",\n      open: showLoginPopup,\n      handleClose: () => toggleLoginPopup(),\n      maxWidth: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LoginForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nBookingPage.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = ({\n  authState,\n  movieState,\n  cinemaState,\n  showtimeState,\n  reservationState,\n  checkoutState\n}, ownProps) => ({\n  isAuth: authState.isAuthenticated,\n  user: authState.user,\n  movie: movieState.selectedMovie,\n  cinema: cinemaState.selectedCinema,\n  cinemas: cinemaState.cinemas,\n  showtimes: showtimeState.showtimes.filter(showtime => showtime.movieId === ownProps.match.params.id),\n  reservations: reservationState.reservations,\n  selectedSeats: checkoutState.selectedSeats,\n  suggestedSeat: checkoutState.suggestedSeat,\n  selectedCinema: checkoutState.selectedCinema,\n  selectedDate: checkoutState.selectedDate,\n  selectedTime: checkoutState.selectedTime,\n  showLoginPopup: checkoutState.showLoginPopup,\n  showInvitation: checkoutState.showInvitation,\n  invitations: checkoutState.invitations,\n  QRCode: checkoutState.QRCode,\n  suggestedSeats: reservationState.suggestedSeats\n});\n\nconst mapDispatchToProps = {\n  getMovie,\n  getCinema,\n  getCinemasUserModeling,\n  getCinemas,\n  getShowtimes,\n  getReservations,\n  getSuggestedReservationSeats,\n  addReservation,\n  setSelectedSeats,\n  setSuggestedSeats,\n  setSelectedCinema,\n  setSelectedDate,\n  setSelectedTime,\n  setInvitation,\n  toggleLoginPopup,\n  showInvitationForm,\n  resetCheckout,\n  setAlert,\n  setQRCode\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(BookingPage));","map":{"version":3,"sources":["/Users/tainguyennguyen/Desktop/final-project/src/pages/Public/BookingPage/BookingPage.js"],"names":["React","Component","PropTypes","connect","withStyles","Grid","Container","getMovie","getCinemasUserModeling","getCinema","getCinemas","getShowtimes","getReservations","getSuggestedReservationSeats","setSelectedSeats","setSelectedCinema","setSelectedDate","setSelectedTime","setInvitation","toggleLoginPopup","showInvitationForm","resetCheckout","setAlert","addReservation","setSuggestedSeats","setQRCode","ResponsiveDialog","LoginForm","styles","MovieInfo","BookingForm","BookingSeats","BookingCheckout","BookingInvitation","jsPDF","BookingPage","didSetSuggestion","jsPdfGenerator","movie","cinema","selectedDate","selectedTime","QRCode","props","doc","setFont","setFontType","setFontSize","text","title","name","Date","toLocaleDateString","addImage","save","onSelectSeat","row","seat","seats","newSeats","onGetReservedSeats","reservations","filteredReservations","filter","reservation","date","startAt","length","reservedSeats","map","reduce","a","b","concat","forEach","onGetSuggestedSeats","suggestedSeats","numberOfTickets","positions","positionsArray","Object","keys","key","String","sort","every","position","step","Math","round","indexArr","suggested","checkSeats","getSeat","i","seatNum","Number","statusAvailability","y","push","Boolean","onChangeCinema","event","target","value","onChangeDate","onChangeTime","sendInvitations","invitations","createInvitations","token","localStorage","getItem","url","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","status","message","error","user","invArray","to","host","time","toDateString","image","inv","setSuggestionSeats","suggestedSeat","componentDidMount","match","params","id","username","componentDidUpdate","prevProps","selectedCinema","checkout","selectedSeats","isAuth","bookSeats","ticketPrice","total","movieId","_id","cinemaId","phone","data","bookedSeats","onFilterCinema","cinemas","showtimes","initialReturn","uniqueCinemas","uniqueTimes","uniqueCinemasId","showtime","index","self","indexOf","includes","render","classes","showLoginPopup","showInvitation","container","height","indexRow","seatsAvailable","propTypes","className","string","object","isRequired","history","mapStateToProps","authState","movieState","cinemaState","showtimeState","reservationState","checkoutState","ownProps","isAuthenticated","selectedMovie","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles, Grid, Container } from '@material-ui/core';\nimport {\n  getMovie,\n  getCinemasUserModeling,\n  getCinema,\n  getCinemas,\n  getShowtimes,\n  getReservations,\n  getSuggestedReservationSeats,\n  setSelectedSeats,\n  setSelectedCinema,\n  setSelectedDate,\n  setSelectedTime,\n  setInvitation,\n  toggleLoginPopup,\n  showInvitationForm,\n  resetCheckout,\n  setAlert,\n  addReservation,\n  setSuggestedSeats,\n  setQRCode\n} from '../../../store/actions';\nimport { ResponsiveDialog } from '../../../components';\nimport LoginForm from '../Login/components/LoginForm';\nimport styles from './styles';\nimport MovieInfo from './components/MovieInfo/MovieInfo';\nimport BookingForm from './components/BookingForm/BookingForm';\nimport BookingSeats from './components/BookingSeats/BookingSeats';\nimport BookingCheckout from './components/BookingCheckout/BookingCheckout';\nimport BookingInvitation from './components/BookingInvitation/BookingInvitation';\n\nimport jsPDF from 'jspdf';\n\nclass BookingPage extends Component {\n  didSetSuggestion = false;\n\n  componentDidMount() {\n    const {\n      user,\n      match,\n      getMovie,\n      getCinemas,\n      getCinemasUserModeling,\n      getShowtimes,\n      getReservations,\n      getSuggestedReservationSeats\n    } = this.props;\n    getMovie(match.params.id);\n    user ? getCinemasUserModeling(user.username) : getCinemas();\n    getShowtimes();\n    getReservations();\n    if (user) getSuggestedReservationSeats(user.username);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { selectedCinema, selectedDate, getCinema } = this.props;\n    if (\n      (selectedCinema && prevProps.selectedCinema !== selectedCinema) ||\n      (selectedCinema && prevProps.selectedDate !== selectedDate)\n    ) {\n      getCinema(selectedCinema);\n    }\n  }\n\n  // JSpdf Generator For generating the PDF\n  jsPdfGenerator = () => {\n    const { movie, cinema, selectedDate, selectedTime, QRCode } = this.props;\n    const doc = new jsPDF();\n    doc.setFont('helvetica');\n    doc.setFontType('bold');\n    doc.setFontSize(22);\n    doc.text(movie.title, 20, 20);\n    doc.setFontSize(16);\n    doc.text(cinema.name, 20, 30);\n    doc.text(\n      `Date: ${new Date(\n        selectedDate\n      ).toLocaleDateString()} - Time: ${selectedTime}`,\n      20,\n      40\n    );\n    doc.addImage(QRCode, 'JPEG', 15, 40, 160, 160);\n    doc.save(`${movie.title}-${cinema.name}.pdf`);\n  };\n\n  onSelectSeat = (row, seat) => {\n    const { cinema, setSelectedSeats } = this.props;\n    const seats = [...cinema.seats];\n    const newSeats = [...seats];\n    if (seats[row][seat] === 1) {\n      newSeats[row][seat] = 1;\n    } else if (seats[row][seat] === 2) {\n      newSeats[row][seat] = 0;\n    } else if (seats[row][seat] === 3) {\n      newSeats[row][seat] = 2;\n    } else {\n      newSeats[row][seat] = 2;\n    }\n    setSelectedSeats([row, seat]);\n  };\n\n  async checkout() {\n    const {\n      movie,\n      cinema,\n      selectedSeats,\n      selectedDate,\n      selectedTime,\n      getReservations,\n      isAuth,\n      user,\n      addReservation,\n      toggleLoginPopup,\n      showInvitationForm,\n      setQRCode\n    } = this.props;\n\n    if (selectedSeats.length === 0) return;\n    if (!isAuth) return toggleLoginPopup();\n\n    const response = await addReservation({\n      date: selectedDate,\n      startAt: selectedTime,\n      seats: this.bookSeats(),\n      ticketPrice: cinema.ticketPrice,\n      total: selectedSeats.length * cinema.ticketPrice,\n      movieId: movie._id,\n      cinemaId: cinema._id,\n      username: user.username,\n      phone: user.phone\n    });\n    if (response.status === 'success') {\n      const { data } = response;\n      setQRCode(data.QRCode);\n      getReservations();\n      showInvitationForm();\n    }\n  }\n\n  bookSeats() {\n    const { cinema, selectedSeats } = this.props;\n    const seats = [...cinema.seats];\n\n    if (selectedSeats.length === 0) return;\n\n    const bookedSeats = seats\n      .map(row =>\n        row.map((seat, i) => (seat === 2 ? i : -1)).filter(seat => seat !== -1)\n      )\n      .map((seats, i) => (seats.length ? seats.map(seat => [i, seat]) : -1))\n      .filter(seat => seat !== -1)\n      .reduce((a, b) => a.concat(b));\n\n    return bookedSeats;\n  }\n\n  onFilterCinema() {\n    const { cinemas, showtimes, selectedCinema, selectedTime } = this.props;\n    const initialReturn = { uniqueCinemas: [], uniqueTimes: [] };\n    if (!showtimes || !cinemas) return initialReturn;\n\n    const uniqueCinemasId = showtimes\n      .filter(showtime =>\n        selectedTime ? showtime.startAt === selectedTime : true\n      )\n      .map(showtime => showtime.cinemaId)\n      .filter((value, index, self) => self.indexOf(value) === index);\n\n    const uniqueCinemas = cinemas.filter(cinema =>\n      uniqueCinemasId.includes(cinema._id)\n    );\n\n    const uniqueTimes = showtimes\n      .filter(showtime =>\n        selectedCinema ? selectedCinema === showtime.cinemaId : true\n      )\n      .map(showtime => showtime.startAt)\n      .filter((value, index, self) => self.indexOf(value) === index)\n      .sort(\n        (a, b) => new Date('1970/01/01 ' + a) - new Date('1970/01/01 ' + b)\n      );\n\n    return { ...initialReturn, uniqueCinemas, uniqueTimes };\n  }\n\n  onGetReservedSeats = () => {\n    const { reservations, cinema, selectedDate, selectedTime } = this.props;\n\n    if (!cinema) return [];\n    const newSeats = [...cinema.seats];\n\n    const filteredReservations = reservations.filter(\n      reservation =>\n        new Date(reservation.date).toLocaleDateString() ===\n          new Date(selectedDate).toLocaleDateString() &&\n        reservation.startAt === selectedTime\n    );\n    if (filteredReservations.length && selectedDate && selectedTime) {\n      const reservedSeats = filteredReservations\n        .map(reservation => reservation.seats)\n        .reduce((a, b) => a.concat(b));\n      reservedSeats.forEach(([row, seat]) => (newSeats[row][seat] = 1));\n      return newSeats;\n    }\n    return newSeats;\n  };\n\n  onGetSuggestedSeats = (seats, suggestedSeats) => {\n    const { numberOfTickets, positions } = suggestedSeats;\n\n    const positionsArray = Object.keys(positions).map(key => {\n      return [String(key), positions[key]];\n    });\n\n    positionsArray.sort((a, b) => {\n      return b[1] - a[1];\n    });\n\n    if (positionsArray.every(position => position[1] === 0)) return;\n\n    const step = Math.round(seats.length / 3);\n    let indexArr = [];\n    let suggested;\n    for (let position of positionsArray) {\n      switch (position[0]) {\n        case 'front':\n          indexArr = [0, step];\n          suggested = this.checkSeats(indexArr, seats, numberOfTickets);\n          break;\n        case 'center':\n          indexArr = [step, step * 2];\n          suggested = this.checkSeats(indexArr, seats, numberOfTickets);\n          break;\n        case 'back':\n          indexArr = [step * 2, step * 3];\n          suggested = this.checkSeats(indexArr, seats, numberOfTickets);\n          break;\n        default:\n          break;\n      }\n      if (suggested) this.getSeat(suggested, seats, numberOfTickets);\n      break;\n    }\n  };\n\n  checkSeats = (indexArr, seats, numberOfTickets) => {\n    for (let i = indexArr[0]; i < indexArr[1]; i++) {\n      for (let seat in seats[i]) {\n        let seatNum = Number(seat);\n\n        if (\n          !seats[i][seatNum] &&\n          seatNum + (numberOfTickets - 1) <= seats[i].length\n        ) {\n          let statusAvailability = [];\n          for (let y = 1; y < numberOfTickets; y++) {\n            //check the next seat if available\n            if (!seats[i][seatNum + y]) {\n              statusAvailability.push(true);\n            } else {\n              statusAvailability.push(false);\n            }\n          }\n          if (statusAvailability.every(Boolean)) return [i, seatNum];\n        }\n      }\n    }\n    return null;\n  };\n\n  getSeat = (suggested, seats, numberOfTickets) => {\n    const { setSuggestedSeats } = this.props;\n    for (let i = suggested[1]; i < suggested[1] + numberOfTickets; i++) {\n      const seat = [suggested[0], i];\n      setSuggestedSeats(seat);\n    }\n  };\n\n  onChangeCinema = event => this.props.setSelectedCinema(event.target.value);\n  onChangeDate = date => this.props.setSelectedDate(date);\n  onChangeTime = event => this.props.setSelectedTime(event.target.value);\n\n  sendInvitations = async () => {\n    const invitations = this.createInvitations();\n    if (!invitations) return;\n    try {\n      const token = localStorage.getItem('jwtToken');\n      const url = '/invitations';\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(invitations)\n      });\n      if (response.ok) {\n        this.props.resetCheckout();\n        this.props.setAlert('invitations Send', 'success', 5000);\n        return { status: 'success', message: 'invitations Send' };\n      }\n    } catch (error) {\n      this.props.setAlert(error.message, 'error', 5000);\n      return {\n        status: 'error',\n        message: ' invitations have not send, try again.'\n      };\n    }\n  };\n\n  createInvitations = () => {\n    const {\n      user,\n      movie,\n      cinema,\n      selectedDate,\n      selectedTime,\n      invitations\n    } = this.props;\n\n    const invArray = Object.keys(invitations)\n      .map(key => ({\n        to: invitations[key],\n        host: user.name,\n        movie: movie.title,\n        time: selectedTime,\n        date: new Date(selectedDate).toDateString(),\n        cinema: cinema.name,\n        image: cinema.image,\n        seat: key\n      }))\n      .filter(inv => inv.to !== '');\n    return invArray;\n  };\n\n  setSuggestionSeats = (seats, suggestedSeats) => {\n    suggestedSeats.forEach(suggestedSeat => {\n      seats[suggestedSeat[0]][suggestedSeat[1]] = 3;\n    });\n    return seats;\n  };\n\n  render() {\n    const {\n      classes,\n      user,\n      movie,\n      cinema,\n      showtimes,\n      selectedSeats,\n      selectedCinema,\n      selectedDate,\n      selectedTime,\n      showLoginPopup,\n      toggleLoginPopup,\n      showInvitation,\n      invitations,\n      setInvitation,\n      resetCheckout,\n      suggestedSeats,\n      suggestedSeat\n    } = this.props;\n    const { uniqueCinemas, uniqueTimes } = this.onFilterCinema();\n    let seats = this.onGetReservedSeats();\n    if (suggestedSeats && selectedTime && !suggestedSeat.length) {\n      this.onGetSuggestedSeats(seats, suggestedSeats);\n    }\n    if (suggestedSeat.length && !this.didSetSuggestion) {\n      seats = this.setSuggestionSeats(seats, suggestedSeat);\n      this.didSetSuggestion = true;\n    }\n\n    return (\n      <Container maxWidth=\"xl\" className={classes.container}>\n        <Grid container spacing={2} style={{ height: '100%' }}>\n          <MovieInfo movie={movie} />\n          <Grid item lg={9} xs={12} md={12}>\n            <BookingForm\n              cinemas={uniqueCinemas}\n              times={uniqueTimes}\n              showtimes={showtimes}\n              selectedCinema={selectedCinema}\n              selectedDate={selectedDate}\n              selectedTime={selectedTime}\n              onChangeCinema={this.onChangeCinema}\n              onChangeDate={this.onChangeDate}\n              onChangeTime={this.onChangeTime}\n            />\n            {showInvitation && !!selectedSeats.length && (\n              <BookingInvitation\n                selectedSeats={selectedSeats}\n                sendInvitations={this.sendInvitations}\n                ignore={resetCheckout}\n                invitations={invitations}\n                onSetInvitation={setInvitation}\n                onDownloadPDF={this.jsPdfGenerator}\n              />\n            )}\n\n            {cinema && selectedCinema && selectedTime && !showInvitation && (\n              <>\n                <BookingSeats\n                  seats={seats}\n                  onSelectSeat={(indexRow, index) =>\n                    this.onSelectSeat(indexRow, index)\n                  }\n                />\n                <BookingCheckout\n                  user={user}\n                  ticketPrice={cinema.ticketPrice}\n                  seatsAvailable={cinema.seatsAvailable}\n                  selectedSeats={selectedSeats.length}\n                  onBookSeats={() => this.checkout()}\n                />\n              </>\n            )}\n          </Grid>\n        </Grid>\n        <ResponsiveDialog\n          id=\"Edit-cinema\"\n          open={showLoginPopup}\n          handleClose={() => toggleLoginPopup()}\n          maxWidth=\"sm\">\n          <LoginForm />\n        </ResponsiveDialog>\n      </Container>\n    );\n  }\n}\n\nBookingPage.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (\n  {\n    authState,\n    movieState,\n    cinemaState,\n    showtimeState,\n    reservationState,\n    checkoutState\n  },\n  ownProps\n) => ({\n  isAuth: authState.isAuthenticated,\n  user: authState.user,\n  movie: movieState.selectedMovie,\n  cinema: cinemaState.selectedCinema,\n  cinemas: cinemaState.cinemas,\n  showtimes: showtimeState.showtimes.filter(\n    showtime => showtime.movieId === ownProps.match.params.id\n  ),\n  reservations: reservationState.reservations,\n  selectedSeats: checkoutState.selectedSeats,\n  suggestedSeat: checkoutState.suggestedSeat,\n  selectedCinema: checkoutState.selectedCinema,\n  selectedDate: checkoutState.selectedDate,\n  selectedTime: checkoutState.selectedTime,\n  showLoginPopup: checkoutState.showLoginPopup,\n  showInvitation: checkoutState.showInvitation,\n  invitations: checkoutState.invitations,\n  QRCode: checkoutState.QRCode,\n  suggestedSeats: reservationState.suggestedSeats\n});\n\nconst mapDispatchToProps = {\n  getMovie,\n  getCinema,\n  getCinemasUserModeling,\n  getCinemas,\n  getShowtimes,\n  getReservations,\n  getSuggestedReservationSeats,\n  addReservation,\n  setSelectedSeats,\n  setSuggestedSeats,\n  setSelectedCinema,\n  setSelectedDate,\n  setSelectedTime,\n  setInvitation,\n  toggleLoginPopup,\n  showInvitationForm,\n  resetCheckout,\n  setAlert,\n  setQRCode\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(BookingPage));\n"]},"metadata":{},"sourceType":"module"}