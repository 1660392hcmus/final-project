{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Popper from '@material-ui/core/Popper';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Chip from '@material-ui/core/Chip';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport var styles = function styles(theme) {\n  var _option;\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      '&:hover $clearIndicatorDirty, &$focused $clearIndicatorDirty': {\n        visibility: 'visible'\n      }\n    },\n\n    /* Pseudo-class applied to the root element if focused. */\n    focused: {},\n\n    /* Styles applied to the tag elements, e.g. the chips. */\n    tag: {\n      margin: theme.spacing(0.5)\n    },\n\n    /* Styles applied to the Input element. */\n    inputRoot: {\n      flexWrap: 'wrap',\n      '&[class*=\"MuiOutlinedInput-root\"]': {\n        padding: 8,\n        '& $input': {\n          padding: '10.5px 6px'\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"]': {\n        paddingTop: 21,\n        '& $input': {\n          paddingTop: 10\n        }\n      }\n    },\n\n    /* Styles applied to the input element. */\n    input: {\n      width: 0,\n      minWidth: 30,\n      flexGrow: 1,\n      opacity: 0,\n      textOverflow: 'ellipsis'\n    },\n\n    /* Styles applied to the input element if tag focused. */\n    inputFocused: {\n      opacity: 1\n    },\n\n    /* Styles applied to the clear indictator. */\n    clearIndicator: {\n      marginRight: -2,\n      padding: 4,\n      color: theme.palette.action.active,\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the clear indictator if the input is dirty. */\n    clearIndicatorDirty: {},\n\n    /* Styles applied to the popup indictator. */\n    popupIndicator: {\n      padding: 2,\n      marginRight: -2,\n      color: theme.palette.action.active\n    },\n\n    /* Styles applied to the popup indictator if the popup is open. */\n    popupIndicatorOpen: {\n      transform: 'rotate(180deg)'\n    },\n\n    /* Styles applied to the popup element. */\n    popup: {\n      zIndex: theme.zIndex.modal\n    },\n\n    /* Styles applied to the `Paper` component. */\n    paper: _extends({}, theme.typography.body1, {\n      margin: '4px 0',\n      '& > ul': {\n        maxHeight: '40vh',\n        overflow: 'auto'\n      }\n    }),\n\n    /* Styles applied to the `listbox` component. */\n    listbox: {\n      listStyle: 'none',\n      margin: 0,\n      padding: '8px 0px',\n      position: 'relative'\n    },\n\n    /* Styles applied to the loading wrapper. */\n    loading: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the no option wrapper. */\n    noOptions: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the option elements. */\n    option: (_option = {\n      minHeight: 48,\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      outline: 'none',\n      // Remove grey highlight\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16\n    }, _defineProperty(_option, theme.breakpoints.up('sm'), {\n      minHeight: 'auto'\n    }), _defineProperty(_option, '&[aria-selected=\"true\"]', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[data-focus=\"true\"]', {\n      backgroundColor: theme.palette.action.hover\n    }), _defineProperty(_option, '&[aria-disabled=\"true\"]', {\n      opacity: 0.5,\n      pointerEvents: 'none'\n    }), _defineProperty(_option, '&:active', {\n      backgroundColor: theme.palette.action.selected\n    }), _option),\n\n    /* Styles applied to the group's label elements. */\n    groupLabel: {\n      backgroundColor: theme.palette.background.paper,\n      top: -8\n    },\n\n    /* Styles applied to the group's ul elements. */\n    groupUl: {\n      padding: 0\n    }\n  };\n};\n\nvar _ref = React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = React.createElement(ArrowDropDownIcon, null);\n\nvar Autocomplete = React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable no-unused-vars */\n  var _props$autoComplete = props.autoComplete,\n      autoComplete = _props$autoComplete === void 0 ? false : _props$autoComplete,\n      _props$autoHighlight = props.autoHighlight,\n      autoHighlight = _props$autoHighlight === void 0 ? false : _props$autoHighlight,\n      _props$autoSelect = props.autoSelect,\n      autoSelect = _props$autoSelect === void 0 ? false : _props$autoSelect,\n      classes = props.classes,\n      className = props.className,\n      _props$clearOnEscape = props.clearOnEscape,\n      clearOnEscape = _props$clearOnEscape === void 0 ? false : _props$clearOnEscape,\n      _props$debug = props.debug,\n      debug = _props$debug === void 0 ? false : _props$debug,\n      defaultValue = props.defaultValue,\n      _props$disableClearab = props.disableClearable,\n      disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,\n      _props$disableCloseOn = props.disableCloseOnSelect,\n      disableCloseOnSelect = _props$disableCloseOn === void 0 ? false : _props$disableCloseOn,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableListWra = props.disableListWrap,\n      disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,\n      _props$disableOpenOnF = props.disableOpenOnFocus,\n      disableOpenOnFocus = _props$disableOpenOnF === void 0 ? false : _props$disableOpenOnF,\n      filterOptions = props.filterOptions,\n      _props$filterSelected = props.filterSelectedOptions,\n      filterSelectedOptions = _props$filterSelected === void 0 ? false : _props$filterSelected,\n      _props$freeSolo = props.freeSolo,\n      freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,\n      getOptionDisabled = props.getOptionDisabled,\n      _props$getOptionLabel = props.getOptionLabel,\n      getOptionLabel = _props$getOptionLabel === void 0 ? function (x) {\n    return x;\n  } : _props$getOptionLabel,\n      groupBy = props.groupBy,\n      idProp = props.id,\n      _props$includeInputIn = props.includeInputInList,\n      includeInputInList = _props$includeInputIn === void 0 ? false : _props$includeInputIn,\n      _props$ListboxCompone = props.ListboxComponent,\n      ListboxComponent = _props$ListboxCompone === void 0 ? 'ul' : _props$ListboxCompone,\n      _props$loading = props.loading,\n      loading = _props$loading === void 0 ? false : _props$loading,\n      _props$loadingText = props.loadingText,\n      loadingText = _props$loadingText === void 0 ? 'Loadingâ€¦' : _props$loadingText,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$noOptionsText = props.noOptionsText,\n      noOptionsText = _props$noOptionsText === void 0 ? 'No options' : _props$noOptionsText,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      _props$options = props.options,\n      options = _props$options === void 0 ? [] : _props$options,\n      _props$PaperComponent = props.PaperComponent,\n      PaperComponent = _props$PaperComponent === void 0 ? Paper : _props$PaperComponent,\n      _props$PopupComponent = props.PopupComponent,\n      PopupComponent = _props$PopupComponent === void 0 ? Popper : _props$PopupComponent,\n      renderGroupProp = props.renderGroup,\n      renderInput = props.renderInput,\n      renderOptionProp = props.renderOption,\n      renderTags = props.renderTags,\n      valueProp = props.value,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"classes\", \"className\", \"clearOnEscape\", \"debug\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disableListWrap\", \"disableOpenOnFocus\", \"filterOptions\", \"filterSelectedOptions\", \"freeSolo\", \"getOptionDisabled\", \"getOptionLabel\", \"groupBy\", \"id\", \"includeInputInList\", \"ListboxComponent\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onOpen\", \"open\", \"options\", \"PaperComponent\", \"PopupComponent\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"value\"]);\n  /* eslint-enable no-unused-vars */\n\n\n  var popperRef = React.useRef(null);\n  React.useEffect(function () {\n    if (popperRef.current) {\n      popperRef.current.update();\n    }\n  });\n\n  var _useAutocomplete = useAutocomplete(props),\n      getRootProps = _useAutocomplete.getRootProps,\n      getInputProps = _useAutocomplete.getInputProps,\n      getInputLabelProps = _useAutocomplete.getInputLabelProps,\n      getPopupIndicatorProps = _useAutocomplete.getPopupIndicatorProps,\n      getClearProps = _useAutocomplete.getClearProps,\n      getTagProps = _useAutocomplete.getTagProps,\n      getPopupProps = _useAutocomplete.getPopupProps,\n      getListboxProps = _useAutocomplete.getListboxProps,\n      getOptionProps = _useAutocomplete.getOptionProps,\n      value = _useAutocomplete.value,\n      dirty = _useAutocomplete.dirty,\n      popupOpen = _useAutocomplete.popupOpen,\n      focused = _useAutocomplete.focused,\n      focusedTag = _useAutocomplete.focusedTag,\n      anchorEl = _useAutocomplete.anchorEl,\n      setAnchorEl = _useAutocomplete.setAnchorEl,\n      inputValue = _useAutocomplete.inputValue,\n      groupedOptions = _useAutocomplete.groupedOptions;\n\n  var startAdornment;\n\n  if (multiple && value.length > 0) {\n    var tagProps = _extends({}, getTagProps(), {\n      className: classes.tag\n    });\n\n    if (renderTags) {\n      startAdornment = renderTags(value, tagProps);\n    } else {\n      startAdornment = value.map(function (option, index) {\n        return React.createElement(Chip, _extends({\n          key: index,\n          \"data-tag-index\": index,\n          tabIndex: -1,\n          label: getOptionLabel(option)\n        }, tagProps));\n      });\n    }\n  }\n\n  var defaultRenderGroup = function defaultRenderGroup(params) {\n    return React.createElement(\"li\", {\n      key: params.key\n    }, React.createElement(ListSubheader, {\n      className: classes.groupLabel,\n      component: \"div\"\n    }, params.key), React.createElement(\"ul\", {\n      className: classes.groupUl\n    }, params.children));\n  };\n\n  var renderGroup = renderGroupProp || defaultRenderGroup;\n  var renderOption = renderOptionProp || getOptionLabel;\n\n  var renderListOption = function renderListOption(option, index) {\n    var optionProps = getOptionProps({\n      option: option,\n      index: index\n    });\n    return React.createElement(\"li\", _extends({}, optionProps, {\n      className: classes.option\n    }), renderOption(option, {\n      selected: optionProps['aria-selected'],\n      inputValue: inputValue\n    }));\n  };\n\n  return React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused)\n  }, getRootProps(), other), renderInput({\n    ref: setAnchorEl,\n    disabled: disabled,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      className: classes.inputRoot,\n      startAdornment: startAdornment,\n      endAdornment: React.createElement(React.Fragment, null, disableClearable || disabled ? null : React.createElement(IconButton, _extends({}, getClearProps(), {\n        title: \"Clear\",\n        className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)\n      }), _ref), freeSolo ? null : React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        title: popupOpen ? 'Close popup' : 'Open popup',\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), _ref2))\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled: disabled\n    }, getInputProps())\n  }), popupOpen && anchorEl ? React.createElement(PopupComponent, _extends({\n    className: classes.popup,\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    popperRef: popperRef,\n    anchorEl: anchorEl,\n    open: true\n  }, getPopupProps()), React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading ? React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps()), groupedOptions.map(function (option, index) {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        children: option.options.map(function (option2, index2) {\n          return renderListOption(option2, option.index + index2);\n        })\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will ignore the blur event if the input if filled.\n   * You can inspect the popup markup with your browser tools.\n   * Consider this option when you need to customize the component.\n   */\n  debug: PropTypes.bool,\n\n  /**\n   * The default input value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the input will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't open on input focus.\n   */\n  disableOpenOnFocus: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {any[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {any[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {any} options The option to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The component used to render the listbox.\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * If `true`, the component is in a loading state.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If true, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback\n   * @param {any} value\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array,\n\n  /**\n   * The component used to render the body of the popup.\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to render the popup.\n   */\n  PopupComponent: PropTypes.elementType,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {any} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * The input value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);","map":{"version":3,"sources":["/Users/tainguyennguyen/Desktop/final-project/node_modules/@material-ui/lab/esm/Autocomplete/Autocomplete.js"],"names":["_objectWithoutProperties","_defineProperty","_extends","React","PropTypes","clsx","withStyles","Popper","ListSubheader","Paper","IconButton","Chip","CloseIcon","ArrowDropDownIcon","useAutocomplete","createFilterOptions","styles","theme","_option","root","visibility","focused","tag","margin","spacing","inputRoot","flexWrap","padding","paddingTop","input","width","minWidth","flexGrow","opacity","textOverflow","inputFocused","clearIndicator","marginRight","color","palette","action","active","clearIndicatorDirty","popupIndicator","popupIndicatorOpen","transform","popup","zIndex","modal","paper","typography","body1","maxHeight","overflow","listbox","listStyle","position","loading","text","secondary","noOptions","option","minHeight","display","justifyContent","alignItems","cursor","outline","WebkitTapHighlightColor","paddingBottom","paddingLeft","paddingRight","breakpoints","up","backgroundColor","selected","hover","pointerEvents","groupLabel","background","top","groupUl","_ref","createElement","fontSize","_ref2","Autocomplete","forwardRef","props","ref","_props$autoComplete","autoComplete","_props$autoHighlight","autoHighlight","_props$autoSelect","autoSelect","classes","className","_props$clearOnEscape","clearOnEscape","_props$debug","debug","defaultValue","_props$disableClearab","disableClearable","_props$disableCloseOn","disableCloseOnSelect","_props$disabled","disabled","_props$disableListWra","disableListWrap","_props$disableOpenOnF","disableOpenOnFocus","filterOptions","_props$filterSelected","filterSelectedOptions","_props$freeSolo","freeSolo","getOptionDisabled","_props$getOptionLabel","getOptionLabel","x","groupBy","idProp","id","_props$includeInputIn","includeInputInList","_props$ListboxCompone","ListboxComponent","_props$loading","_props$loadingText","loadingText","_props$multiple","multiple","_props$noOptionsText","noOptionsText","onChange","onClose","onOpen","open","_props$options","options","_props$PaperComponent","PaperComponent","_props$PopupComponent","PopupComponent","renderGroupProp","renderGroup","renderInput","renderOptionProp","renderOption","renderTags","valueProp","value","other","popperRef","useRef","useEffect","current","update","_useAutocomplete","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getPopupProps","getListboxProps","getOptionProps","dirty","popupOpen","focusedTag","anchorEl","setAnchorEl","inputValue","groupedOptions","startAdornment","length","tagProps","map","index","key","tabIndex","label","defaultRenderGroup","params","component","children","renderListOption","optionProps","InputLabelProps","InputProps","endAdornment","Fragment","title","inputProps","style","clientWidth","option2","index2","process","env","NODE_ENV","propTypes","bool","object","string","any","func","elementType","node","array","isRequired","name"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Popper from '@material-ui/core/Popper';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Chip from '@material-ui/core/Chip';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport var styles = function styles(theme) {\n  var _option;\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      '&:hover $clearIndicatorDirty, &$focused $clearIndicatorDirty': {\n        visibility: 'visible'\n      }\n    },\n\n    /* Pseudo-class applied to the root element if focused. */\n    focused: {},\n\n    /* Styles applied to the tag elements, e.g. the chips. */\n    tag: {\n      margin: theme.spacing(0.5)\n    },\n\n    /* Styles applied to the Input element. */\n    inputRoot: {\n      flexWrap: 'wrap',\n      '&[class*=\"MuiOutlinedInput-root\"]': {\n        padding: 8,\n        '& $input': {\n          padding: '10.5px 6px'\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"]': {\n        paddingTop: 21,\n        '& $input': {\n          paddingTop: 10\n        }\n      }\n    },\n\n    /* Styles applied to the input element. */\n    input: {\n      width: 0,\n      minWidth: 30,\n      flexGrow: 1,\n      opacity: 0,\n      textOverflow: 'ellipsis'\n    },\n\n    /* Styles applied to the input element if tag focused. */\n    inputFocused: {\n      opacity: 1\n    },\n\n    /* Styles applied to the clear indictator. */\n    clearIndicator: {\n      marginRight: -2,\n      padding: 4,\n      color: theme.palette.action.active,\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the clear indictator if the input is dirty. */\n    clearIndicatorDirty: {},\n\n    /* Styles applied to the popup indictator. */\n    popupIndicator: {\n      padding: 2,\n      marginRight: -2,\n      color: theme.palette.action.active\n    },\n\n    /* Styles applied to the popup indictator if the popup is open. */\n    popupIndicatorOpen: {\n      transform: 'rotate(180deg)'\n    },\n\n    /* Styles applied to the popup element. */\n    popup: {\n      zIndex: theme.zIndex.modal\n    },\n\n    /* Styles applied to the `Paper` component. */\n    paper: _extends({}, theme.typography.body1, {\n      margin: '4px 0',\n      '& > ul': {\n        maxHeight: '40vh',\n        overflow: 'auto'\n      }\n    }),\n\n    /* Styles applied to the `listbox` component. */\n    listbox: {\n      listStyle: 'none',\n      margin: 0,\n      padding: '8px 0px',\n      position: 'relative'\n    },\n\n    /* Styles applied to the loading wrapper. */\n    loading: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the no option wrapper. */\n    noOptions: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the option elements. */\n    option: (_option = {\n      minHeight: 48,\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      outline: 'none',\n      // Remove grey highlight\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16\n    }, _defineProperty(_option, theme.breakpoints.up('sm'), {\n      minHeight: 'auto'\n    }), _defineProperty(_option, '&[aria-selected=\"true\"]', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[data-focus=\"true\"]', {\n      backgroundColor: theme.palette.action.hover\n    }), _defineProperty(_option, '&[aria-disabled=\"true\"]', {\n      opacity: 0.5,\n      pointerEvents: 'none'\n    }), _defineProperty(_option, '&:active', {\n      backgroundColor: theme.palette.action.selected\n    }), _option),\n\n    /* Styles applied to the group's label elements. */\n    groupLabel: {\n      backgroundColor: theme.palette.background.paper,\n      top: -8\n    },\n\n    /* Styles applied to the group's ul elements. */\n    groupUl: {\n      padding: 0\n    }\n  };\n};\n\nvar _ref = React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = React.createElement(ArrowDropDownIcon, null);\n\nvar Autocomplete = React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable no-unused-vars */\n  var _props$autoComplete = props.autoComplete,\n      autoComplete = _props$autoComplete === void 0 ? false : _props$autoComplete,\n      _props$autoHighlight = props.autoHighlight,\n      autoHighlight = _props$autoHighlight === void 0 ? false : _props$autoHighlight,\n      _props$autoSelect = props.autoSelect,\n      autoSelect = _props$autoSelect === void 0 ? false : _props$autoSelect,\n      classes = props.classes,\n      className = props.className,\n      _props$clearOnEscape = props.clearOnEscape,\n      clearOnEscape = _props$clearOnEscape === void 0 ? false : _props$clearOnEscape,\n      _props$debug = props.debug,\n      debug = _props$debug === void 0 ? false : _props$debug,\n      defaultValue = props.defaultValue,\n      _props$disableClearab = props.disableClearable,\n      disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,\n      _props$disableCloseOn = props.disableCloseOnSelect,\n      disableCloseOnSelect = _props$disableCloseOn === void 0 ? false : _props$disableCloseOn,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableListWra = props.disableListWrap,\n      disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,\n      _props$disableOpenOnF = props.disableOpenOnFocus,\n      disableOpenOnFocus = _props$disableOpenOnF === void 0 ? false : _props$disableOpenOnF,\n      filterOptions = props.filterOptions,\n      _props$filterSelected = props.filterSelectedOptions,\n      filterSelectedOptions = _props$filterSelected === void 0 ? false : _props$filterSelected,\n      _props$freeSolo = props.freeSolo,\n      freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,\n      getOptionDisabled = props.getOptionDisabled,\n      _props$getOptionLabel = props.getOptionLabel,\n      getOptionLabel = _props$getOptionLabel === void 0 ? function (x) {\n    return x;\n  } : _props$getOptionLabel,\n      groupBy = props.groupBy,\n      idProp = props.id,\n      _props$includeInputIn = props.includeInputInList,\n      includeInputInList = _props$includeInputIn === void 0 ? false : _props$includeInputIn,\n      _props$ListboxCompone = props.ListboxComponent,\n      ListboxComponent = _props$ListboxCompone === void 0 ? 'ul' : _props$ListboxCompone,\n      _props$loading = props.loading,\n      loading = _props$loading === void 0 ? false : _props$loading,\n      _props$loadingText = props.loadingText,\n      loadingText = _props$loadingText === void 0 ? 'Loadingâ€¦' : _props$loadingText,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$noOptionsText = props.noOptionsText,\n      noOptionsText = _props$noOptionsText === void 0 ? 'No options' : _props$noOptionsText,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      _props$options = props.options,\n      options = _props$options === void 0 ? [] : _props$options,\n      _props$PaperComponent = props.PaperComponent,\n      PaperComponent = _props$PaperComponent === void 0 ? Paper : _props$PaperComponent,\n      _props$PopupComponent = props.PopupComponent,\n      PopupComponent = _props$PopupComponent === void 0 ? Popper : _props$PopupComponent,\n      renderGroupProp = props.renderGroup,\n      renderInput = props.renderInput,\n      renderOptionProp = props.renderOption,\n      renderTags = props.renderTags,\n      valueProp = props.value,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"classes\", \"className\", \"clearOnEscape\", \"debug\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disableListWrap\", \"disableOpenOnFocus\", \"filterOptions\", \"filterSelectedOptions\", \"freeSolo\", \"getOptionDisabled\", \"getOptionLabel\", \"groupBy\", \"id\", \"includeInputInList\", \"ListboxComponent\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onOpen\", \"open\", \"options\", \"PaperComponent\", \"PopupComponent\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"value\"]);\n  /* eslint-enable no-unused-vars */\n\n\n  var popperRef = React.useRef(null);\n  React.useEffect(function () {\n    if (popperRef.current) {\n      popperRef.current.update();\n    }\n  });\n\n  var _useAutocomplete = useAutocomplete(props),\n      getRootProps = _useAutocomplete.getRootProps,\n      getInputProps = _useAutocomplete.getInputProps,\n      getInputLabelProps = _useAutocomplete.getInputLabelProps,\n      getPopupIndicatorProps = _useAutocomplete.getPopupIndicatorProps,\n      getClearProps = _useAutocomplete.getClearProps,\n      getTagProps = _useAutocomplete.getTagProps,\n      getPopupProps = _useAutocomplete.getPopupProps,\n      getListboxProps = _useAutocomplete.getListboxProps,\n      getOptionProps = _useAutocomplete.getOptionProps,\n      value = _useAutocomplete.value,\n      dirty = _useAutocomplete.dirty,\n      popupOpen = _useAutocomplete.popupOpen,\n      focused = _useAutocomplete.focused,\n      focusedTag = _useAutocomplete.focusedTag,\n      anchorEl = _useAutocomplete.anchorEl,\n      setAnchorEl = _useAutocomplete.setAnchorEl,\n      inputValue = _useAutocomplete.inputValue,\n      groupedOptions = _useAutocomplete.groupedOptions;\n\n  var startAdornment;\n\n  if (multiple && value.length > 0) {\n    var tagProps = _extends({}, getTagProps(), {\n      className: classes.tag\n    });\n\n    if (renderTags) {\n      startAdornment = renderTags(value, tagProps);\n    } else {\n      startAdornment = value.map(function (option, index) {\n        return React.createElement(Chip, _extends({\n          key: index,\n          \"data-tag-index\": index,\n          tabIndex: -1,\n          label: getOptionLabel(option)\n        }, tagProps));\n      });\n    }\n  }\n\n  var defaultRenderGroup = function defaultRenderGroup(params) {\n    return React.createElement(\"li\", {\n      key: params.key\n    }, React.createElement(ListSubheader, {\n      className: classes.groupLabel,\n      component: \"div\"\n    }, params.key), React.createElement(\"ul\", {\n      className: classes.groupUl\n    }, params.children));\n  };\n\n  var renderGroup = renderGroupProp || defaultRenderGroup;\n  var renderOption = renderOptionProp || getOptionLabel;\n\n  var renderListOption = function renderListOption(option, index) {\n    var optionProps = getOptionProps({\n      option: option,\n      index: index\n    });\n    return React.createElement(\"li\", _extends({}, optionProps, {\n      className: classes.option\n    }), renderOption(option, {\n      selected: optionProps['aria-selected'],\n      inputValue: inputValue\n    }));\n  };\n\n  return React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused)\n  }, getRootProps(), other), renderInput({\n    ref: setAnchorEl,\n    disabled: disabled,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      className: classes.inputRoot,\n      startAdornment: startAdornment,\n      endAdornment: React.createElement(React.Fragment, null, disableClearable || disabled ? null : React.createElement(IconButton, _extends({}, getClearProps(), {\n        title: \"Clear\",\n        className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)\n      }), _ref), freeSolo ? null : React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        title: popupOpen ? 'Close popup' : 'Open popup',\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), _ref2))\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled: disabled\n    }, getInputProps())\n  }), popupOpen && anchorEl ? React.createElement(PopupComponent, _extends({\n    className: classes.popup,\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    popperRef: popperRef,\n    anchorEl: anchorEl,\n    open: true\n  }, getPopupProps()), React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading ? React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps()), groupedOptions.map(function (option, index) {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        children: option.options.map(function (option2, index2) {\n          return renderListOption(option2, option.index + index2);\n        })\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will ignore the blur event if the input if filled.\n   * You can inspect the popup markup with your browser tools.\n   * Consider this option when you need to customize the component.\n   */\n  debug: PropTypes.bool,\n\n  /**\n   * The default input value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the input will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't open on input focus.\n   */\n  disableOpenOnFocus: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {any[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {any[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {any} options The option to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The component used to render the listbox.\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * If `true`, the component is in a loading state.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If true, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback\n   * @param {any} value\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array,\n\n  /**\n   * The component used to render the body of the popup.\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to render the popup.\n   */\n  PopupComponent: PropTypes.elementType,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {any} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * The input value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);"]},"metadata":{},"sourceType":"module"}