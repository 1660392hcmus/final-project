{"ast":null,"code":"import { GET_CINEMAS, GET_CINEMA } from '../types';\nimport { setAlert } from './alert';\nexport const uploadCinemaImage = (id, image) => async dispatch => {\n  try {\n    const data = new FormData();\n    data.append('file', image);\n    const url = '/cinemas/photo/' + id;\n    const response = await fetch(url, {\n      method: 'POST',\n      body: data\n    });\n    const responseData = await response.json();\n\n    if (response.ok) {\n      dispatch(setAlert('Image Uploaded', 'success', 5000));\n    }\n\n    if (responseData.error) {\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const getCinemas = () => async dispatch => {\n  try {\n    const url = '/cinemas';\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const cinemas = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: GET_CINEMAS,\n        payload: cinemas\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const getCinema = id => async dispatch => {\n  try {\n    const url = '/cinemas/' + id;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const cinema = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: GET_CINEMA,\n        payload: cinema\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const createCinemas = (image, newCinema) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/cinemas';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newCinema)\n    });\n    const cinema = await response.json();\n\n    if (response.ok) {\n      dispatch(setAlert('Cinema Created', 'success', 5000));\n      if (image) dispatch(uploadCinemaImage(cinema._id, image));\n      dispatch(getCinemas());\n      return {\n        status: 'success',\n        message: 'Cinema Created'\n      };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Cinema have not been saved, try again.'\n    };\n  }\n};\nexport const updateCinemas = (image, cinema, id) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/cinemas/' + id;\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cinema)\n    });\n\n    if (response.ok) {\n      dispatch(setAlert('Cinema Updated', 'success', 5000));\n      if (image) dispatch(uploadCinemaImage(id, image));\n      return {\n        status: 'success',\n        message: 'Cinema Updated'\n      };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Cinema have not been updated, try again.'\n    };\n  }\n};\nexport const removeCinemas = id => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/cinemas/' + id;\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.ok) {\n      dispatch(setAlert('Cinema Deleted', 'success', 5000));\n      return {\n        status: 'success',\n        message: 'Cinema Removed'\n      };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Cinema have not been deleted, try again.'\n    };\n  }\n};\nexport const getCinemasUserModeling = username => async dispatch => {\n  try {\n    const url = '/cinemas/usermodeling/' + username;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const cinemas = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: GET_CINEMAS,\n        payload: cinemas\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};","map":{"version":3,"sources":["/Users/tainguyennguyen/Desktop/final-project/src/store/actions/cinemas.js"],"names":["GET_CINEMAS","GET_CINEMA","setAlert","uploadCinemaImage","id","image","dispatch","data","FormData","append","url","response","fetch","method","body","responseData","json","ok","error","message","getCinemas","headers","cinemas","type","payload","getCinema","cinema","createCinemas","newCinema","token","localStorage","getItem","Authorization","JSON","stringify","_id","status","updateCinemas","removeCinemas","getCinemasUserModeling","username"],"mappings":"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","sourcesContent":["import { GET_CINEMAS, GET_CINEMA } from '../types';\nimport { setAlert } from './alert';\n\nexport const uploadCinemaImage = (id, image) => async dispatch => {\n  try {\n    const data = new FormData();\n    data.append('file', image);\n    const url = '/cinemas/photo/' + id;\n    const response = await fetch(url, {\n      method: 'POST',\n      body: data\n    });\n    const responseData = await response.json();\n    if (response.ok) {\n      dispatch(setAlert('Image Uploaded', 'success', 5000));\n    }\n    if (responseData.error) {\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const getCinemas = () => async dispatch => {\n  try {\n    const url = '/cinemas';\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n    const cinemas = await response.json();\n    if (response.ok) {\n      dispatch({ type: GET_CINEMAS, payload: cinemas });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const getCinema = id => async dispatch => {\n  try {\n    const url = '/cinemas/' + id;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n    const cinema = await response.json();\n    if (response.ok) {\n      dispatch({ type: GET_CINEMA, payload: cinema });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const createCinemas = (image, newCinema) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/cinemas';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newCinema)\n    });\n    const cinema = await response.json();\n    if (response.ok) {\n      dispatch(setAlert('Cinema Created', 'success', 5000));\n      if (image) dispatch(uploadCinemaImage(cinema._id, image));\n      dispatch(getCinemas());\n      return { status: 'success', message: 'Cinema Created' };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Cinema have not been saved, try again.'\n    };\n  }\n};\n\nexport const updateCinemas = (image, cinema, id) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/cinemas/' + id;\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cinema)\n    });\n    if (response.ok) {\n      dispatch(setAlert('Cinema Updated', 'success', 5000));\n      if (image) dispatch(uploadCinemaImage(id, image));\n      return { status: 'success', message: 'Cinema Updated' };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Cinema have not been updated, try again.'\n    };\n  }\n};\n\nexport const removeCinemas = id => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/cinemas/' + id;\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      dispatch(setAlert('Cinema Deleted', 'success', 5000));\n      return { status: 'success', message: 'Cinema Removed' };\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' Cinema have not been deleted, try again.'\n    };\n  }\n};\n\nexport const getCinemasUserModeling = username => async dispatch => {\n  try {\n    const url = '/cinemas/usermodeling/' + username;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n    const cinemas = await response.json();\n    if (response.ok) {\n      dispatch({ type: GET_CINEMAS, payload: cinemas });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}