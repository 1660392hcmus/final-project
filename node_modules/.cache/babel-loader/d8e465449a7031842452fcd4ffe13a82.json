{"ast":null,"code":"import { GET_USERS, ADD_USER, UPDATE_USER, DELETE_USER, TOGGLE_USER_DIALOG, SELECT_USER, SELECT_ALL_USERS } from '../types';\nimport { setAlert } from './alert';\nexport const toggleUserDialog = () => ({\n  type: TOGGLE_USER_DIALOG\n});\nexport const selectUser = user => ({\n  type: SELECT_USER,\n  payload: user\n});\nexport const selectAllUsers = () => ({\n  type: SELECT_ALL_USERS\n});\nexport const getUsers = () => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/users';\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const users = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: GET_USERS,\n        payload: users\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const addUser = user => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/users/';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n    const data = await response.json();\n    const newUser = data.user;\n\n    if (response.ok) {\n      dispatch(setAlert('User Created', 'success', 5000));\n      dispatch({\n        type: ADD_USER,\n        payload: newUser\n      });\n      return {\n        status: 'success',\n        message: 'User Created'\n      };\n    } else {\n      throw new Error(data._message);\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' User have not been saved, try again.'\n    };\n  }\n};\nexport const updateUser = (user, id) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/users/' + id;\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n    const data = await response.json();\n    const newUser = data.user;\n\n    if (response.ok) {\n      dispatch(setAlert('User Updated', 'success', 5000));\n      dispatch({\n        type: UPDATE_USER,\n        payload: newUser\n      });\n      return {\n        status: 'success',\n        message: 'User Updated'\n      };\n    } else {\n      throw new Error(data._message);\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' User have not been saved, try again.'\n    };\n  }\n};\nexport const deleteUser = id => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/users/' + id;\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n\n    if (response.ok) {\n      dispatch(setAlert('User Deleted', 'success', 5000));\n      dispatch({\n        type: DELETE_USER,\n        payload: id\n      });\n      return {\n        status: 'success',\n        message: 'User Removed'\n      };\n    } else {\n      throw new Error(data._message);\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' User have not been deleted, try again.'\n    };\n  }\n};","map":{"version":3,"sources":["/Users/tainguyennguyen/Desktop/final-project/src/store/actions/users.js"],"names":["GET_USERS","ADD_USER","UPDATE_USER","DELETE_USER","TOGGLE_USER_DIALOG","SELECT_USER","SELECT_ALL_USERS","setAlert","toggleUserDialog","type","selectUser","user","payload","selectAllUsers","getUsers","dispatch","token","localStorage","getItem","url","response","fetch","method","headers","Authorization","users","json","ok","error","message","addUser","body","JSON","stringify","data","newUser","status","Error","_message","updateUser","id","deleteUser"],"mappings":"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","sourcesContent":["import {\n  GET_USERS,\n  ADD_USER,\n  UPDATE_USER,\n  DELETE_USER,\n  TOGGLE_USER_DIALOG,\n  SELECT_USER,\n  SELECT_ALL_USERS\n} from '../types';\n\nimport { setAlert } from './alert';\n\nexport const toggleUserDialog = () => ({ type: TOGGLE_USER_DIALOG });\n\nexport const selectUser = user => ({\n  type: SELECT_USER,\n  payload: user\n});\n\nexport const selectAllUsers = () => ({ type: SELECT_ALL_USERS });\n\nexport const getUsers = () => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/users';\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const users = await response.json();\n    if (response.ok) {\n      dispatch({ type: GET_USERS, payload: users });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\n\nexport const addUser = user => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/users/';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n    const data = await response.json();\n    const newUser = data.user;\n    if (response.ok) {\n      dispatch(setAlert('User Created', 'success', 5000));\n      dispatch({ type: ADD_USER, payload: newUser });\n      return { status: 'success', message: 'User Created' };\n    } else {\n      throw new Error(data._message);\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' User have not been saved, try again.'\n    };\n  }\n};\n\nexport const updateUser = (user, id) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/users/' + id;\n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n    const data = await response.json();\n    const newUser = data.user;\n    if (response.ok) {\n      dispatch(setAlert('User Updated', 'success', 5000));\n      dispatch({ type: UPDATE_USER, payload: newUser });\n      return { status: 'success', message: 'User Updated' };\n    } else {\n      throw new Error(data._message);\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' User have not been saved, try again.'\n    };\n  }\n};\n\nexport const deleteUser = id => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/users/' + id;\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    if (response.ok) {\n      dispatch(setAlert('User Deleted', 'success', 5000));\n      dispatch({ type: DELETE_USER, payload: id });\n      return { status: 'success', message: 'User Removed' };\n    } else {\n      throw new Error(data._message);\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n    return {\n      status: 'error',\n      message: ' User have not been deleted, try again.'\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}