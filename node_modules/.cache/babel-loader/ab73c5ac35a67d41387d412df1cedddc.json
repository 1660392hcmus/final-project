{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport TreeViewContext from './TreeViewContext';\nimport { withStyles } from '@material-ui/core/styles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  }\n};\n\nfunction arrayDiff(arr1, arr2) {\n  if (arr1.length !== arr2.length) return true;\n\n  for (var i = 0; i < arr1.length; i += 1) {\n    if (arr1[i] !== arr2[i]) return true;\n  }\n\n  return false;\n}\n\nvar defaultExpandedDefault = [];\nvar TreeView = React.forwardRef(function TreeView(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      defaultCollapseIcon = props.defaultCollapseIcon,\n      defaultEndIcon = props.defaultEndIcon,\n      _props$defaultExpande = props.defaultExpanded,\n      defaultExpanded = _props$defaultExpande === void 0 ? defaultExpandedDefault : _props$defaultExpande,\n      defaultExpandIcon = props.defaultExpandIcon,\n      defaultParentIcon = props.defaultParentIcon,\n      onNodeToggle = props.onNodeToggle,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"defaultCollapseIcon\", \"defaultEndIcon\", \"defaultExpanded\", \"defaultExpandIcon\", \"defaultParentIcon\", \"onNodeToggle\"]);\n\n  var _React$useState = React.useState(defaultExpanded),\n      expanded = _React$useState[0],\n      setExpanded = _React$useState[1];\n\n  var _React$useState2 = React.useState(null),\n      tabable = _React$useState2[0],\n      setTabable = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      focused = _React$useState3[0],\n      setFocused = _React$useState3[1];\n\n  var firstNode = React.useRef(null);\n  var nodeMap = React.useRef({});\n  var firstCharMap = React.useRef({});\n  var isExpanded = React.useCallback(function (id) {\n    return expanded.indexOf(id) !== -1;\n  }, [expanded]);\n\n  var isTabable = function isTabable(id) {\n    return tabable === id;\n  };\n\n  var isFocused = function isFocused(id) {\n    return focused === id;\n  };\n\n  var prevChildIds = React.useRef([]);\n  React.useEffect(function () {\n    var childIds = React.Children.map(children, function (child) {\n      return child.props.nodeId;\n    }) || [];\n\n    if (arrayDiff(prevChildIds.current, childIds)) {\n      nodeMap.current[-1] = {\n        parent: null,\n        children: childIds\n      };\n      childIds.forEach(function (id, index) {\n        if (index === 0) {\n          firstNode.current = id;\n          setTabable(id);\n        }\n\n        nodeMap.current[id] = {\n          parent: null\n        };\n      });\n      prevChildIds.current = childIds;\n    }\n  }, [children]);\n  var getLastNode = React.useCallback(function (id) {\n    var map = nodeMap.current[id];\n\n    if (isExpanded(id) && map.children && map.children.length > 0) {\n      return getLastNode(map.children[map.children.length - 1]);\n    }\n\n    return id;\n  }, [isExpanded]);\n\n  var focus = function focus(id) {\n    if (id) {\n      setTabable(id);\n    }\n\n    setFocused(id);\n  };\n\n  var getNextNode = function getNextNode(id, end) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n\n    if (!end) {\n      if (isExpanded(id)) {\n        return map.children[0];\n      }\n    }\n\n    if (parent) {\n      var nodeIndex = parent.children.indexOf(id);\n      var nextIndex = nodeIndex + 1;\n\n      if (parent.children.length > nextIndex) {\n        return parent.children[nextIndex];\n      }\n\n      return getNextNode(parent.id, true);\n    }\n\n    var topLevelNodes = nodeMap.current[-1].children;\n    var topLevelNodeIndex = topLevelNodes.indexOf(id);\n\n    if (topLevelNodeIndex !== -1 && topLevelNodeIndex !== topLevelNodes.length - 1) {\n      return topLevelNodes[topLevelNodeIndex + 1];\n    }\n\n    return null;\n  };\n\n  var getPreviousNode = function getPreviousNode(id) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n\n    if (parent) {\n      var nodeIndex = parent.children.indexOf(id);\n\n      if (nodeIndex !== 0) {\n        var nextIndex = nodeIndex - 1;\n        return getLastNode(parent.children[nextIndex]);\n      }\n\n      return parent.id;\n    }\n\n    var topLevelNodes = nodeMap.current[-1].children;\n    var topLevelNodeIndex = topLevelNodes.indexOf(id);\n\n    if (topLevelNodeIndex > 0) {\n      return getLastNode(topLevelNodes[topLevelNodeIndex - 1]);\n    }\n\n    return null;\n  };\n\n  var focusNextNode = function focusNextNode(id) {\n    var nextNode = getNextNode(id);\n\n    if (nextNode) {\n      focus(nextNode);\n    }\n  };\n\n  var focusPreviousNode = function focusPreviousNode(id) {\n    var previousNode = getPreviousNode(id);\n\n    if (previousNode) {\n      focus(previousNode);\n    }\n  };\n\n  var focusFirstNode = function focusFirstNode() {\n    if (firstNode.current) {\n      focus(firstNode.current);\n    }\n  };\n\n  var focusLastNode = function focusLastNode() {\n    var topLevelNodes = nodeMap.current[-1].children;\n    var lastNode = getLastNode(topLevelNodes[topLevelNodes.length - 1]);\n    focus(lastNode);\n  };\n\n  var toggle = function toggle() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : focused;\n    setExpanded(function (prevExpanded) {\n      var newExpanded;\n\n      if (prevExpanded.indexOf(value) !== -1) {\n        newExpanded = prevExpanded.filter(function (id) {\n          return id !== value;\n        });\n        setTabable(function (oldTabable) {\n          var map = nodeMap.current[oldTabable];\n\n          if (oldTabable && (map && map.parent ? map.parent.id : null) === value) {\n            return value;\n          }\n\n          return oldTabable;\n        });\n      } else {\n        newExpanded = [value].concat(_toConsumableArray(prevExpanded));\n      }\n\n      if (onNodeToggle) {\n        onNodeToggle(value, newExpanded.indexOf(value) !== -1);\n      }\n\n      return newExpanded;\n    });\n  };\n\n  var expandAllSiblings = function expandAllSiblings(id) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n    var diff;\n\n    if (parent) {\n      diff = parent.children.filter(function (child) {\n        return !isExpanded(child);\n      });\n    } else {\n      var topLevelNodes = nodeMap.current[-1].children;\n      diff = topLevelNodes.filter(function (node) {\n        return !isExpanded(node);\n      });\n    }\n\n    setExpanded(function (oldExpanded) {\n      return [].concat(_toConsumableArray(oldExpanded), _toConsumableArray(diff));\n    });\n  };\n\n  var handleLeftArrow = function handleLeftArrow(id, event) {\n    var flag = false;\n\n    if (isExpanded(id)) {\n      toggle(id);\n      flag = true;\n    } else {\n      var parent = nodeMap.current[id].parent;\n\n      if (parent) {\n        focus(parent);\n        flag = true;\n      }\n    }\n\n    if (flag && event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  var getIndexFirstChars = function getIndexFirstChars(firstChars, startIndex, char) {\n    for (var i = startIndex; i < firstChars.length; i += 1) {\n      if (char === firstChars[i]) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  var setFocusByFirstCharacter = function setFocusByFirstCharacter(id, char) {\n    var start;\n    var index;\n    var lowercaseChar = char.toLowerCase();\n    var firstCharIds = [];\n    var firstChars = []; // This really only works since the ids are strings\n\n    Object.entries(firstCharMap.current).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          nodeId = _ref2[0],\n          firstChar = _ref2[1];\n\n      var map = nodeMap.current[nodeId];\n      var visible = map.parent ? isExpanded(map.parent) : true;\n\n      if (visible) {\n        firstCharIds.push(nodeId);\n        firstChars.push(firstChar);\n      }\n    }); // Get start index for search based on position of currentItem\n\n    start = firstCharIds.indexOf(id) + 1;\n\n    if (start === nodeMap.current.length) {\n      start = 0;\n    } // Check remaining slots in the menu\n\n\n    index = getIndexFirstChars(firstChars, start, lowercaseChar); // If not found in remaining slots, check from beginning\n\n    if (index === -1) {\n      index = getIndexFirstChars(firstChars, 0, lowercaseChar);\n    } // If match was found...\n\n\n    if (index > -1) {\n      focus(firstCharIds[index]);\n    }\n  };\n\n  var addNodeToNodeMap = function addNodeToNodeMap(id, childrenIds) {\n    var currentMap = nodeMap.current[id];\n    nodeMap.current[id] = _extends({}, currentMap, {\n      children: childrenIds,\n      id: id\n    });\n    childrenIds.forEach(function (childId) {\n      var currentChildMap = nodeMap.current[childId];\n      nodeMap.current[childId] = _extends({}, currentChildMap, {\n        parent: id,\n        id: childId\n      });\n    });\n  };\n\n  var removeNodeFromNodeMap = function removeNodeFromNodeMap(id) {\n    var map = nodeMap.current[id];\n\n    if (map) {\n      if (map.parent) {\n        var parentMap = nodeMap.current[map.parent];\n\n        if (parentMap && parentMap.children) {\n          var parentChildren = parentMap.children.filter(function (c) {\n            return c !== id;\n          });\n          nodeMap.current[map.parent] = _extends({}, parentMap, {\n            children: parentChildren\n          });\n        }\n      }\n\n      delete nodeMap.current[id];\n    }\n  };\n\n  var handleFirstChars = function handleFirstChars(id, firstChar) {\n    firstCharMap.current[id] = firstChar;\n  };\n\n  return React.createElement(TreeViewContext.Provider, {\n    value: {\n      expandAllSiblings: expandAllSiblings,\n      focus: focus,\n      focusFirstNode: focusFirstNode,\n      focusLastNode: focusLastNode,\n      focusNextNode: focusNextNode,\n      focusPreviousNode: focusPreviousNode,\n      handleFirstChars: handleFirstChars,\n      handleLeftArrow: handleLeftArrow,\n      addNodeToNodeMap: addNodeToNodeMap,\n      removeNodeFromNodeMap: removeNodeFromNodeMap,\n      icons: {\n        defaultCollapseIcon: defaultCollapseIcon,\n        defaultExpandIcon: defaultExpandIcon,\n        defaultParentIcon: defaultParentIcon,\n        defaultEndIcon: defaultEndIcon\n      },\n      isExpanded: isExpanded,\n      isFocused: isFocused,\n      isTabable: isTabable,\n      setFocusByFirstCharacter: setFocusByFirstCharacter,\n      toggle: toggle\n    }\n  }, React.createElement(\"ul\", _extends({\n    role: \"tree\",\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default icon used to collapse the node.\n   */\n  defaultCollapseIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a end node. This is applied to all\n   * tree nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultEndIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids.\n   */\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * The default icon used to expand the node.\n   */\n  defaultExpandIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a parent node. This is applied to all\n   * parent nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultParentIcon: PropTypes.node,\n\n  /**\n   * Callback fired when a `TreeItem` is expanded/collapsed.\n   *\n   * @param {string} nodeId The id of the toggled node.\n   * @param {boolean} expanded The node status - If `true` the node was expanded. If `false` the node was collapsed.\n   */\n  onNodeToggle: PropTypes.func\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTreeView'\n})(TreeView);","map":{"version":3,"sources":["/Users/tainguyennguyen/Desktop/final-project/node_modules/@material-ui/lab/esm/TreeView/TreeView.js"],"names":["_extends","_slicedToArray","_toConsumableArray","_objectWithoutProperties","React","clsx","PropTypes","TreeViewContext","withStyles","styles","root","padding","margin","listStyle","arrayDiff","arr1","arr2","length","i","defaultExpandedDefault","TreeView","forwardRef","props","ref","children","classes","className","defaultCollapseIcon","defaultEndIcon","_props$defaultExpande","defaultExpanded","defaultExpandIcon","defaultParentIcon","onNodeToggle","other","_React$useState","useState","expanded","setExpanded","_React$useState2","tabable","setTabable","_React$useState3","focused","setFocused","firstNode","useRef","nodeMap","firstCharMap","isExpanded","useCallback","id","indexOf","isTabable","isFocused","prevChildIds","useEffect","childIds","Children","map","child","nodeId","current","parent","forEach","index","getLastNode","focus","getNextNode","end","nodeIndex","nextIndex","topLevelNodes","topLevelNodeIndex","getPreviousNode","focusNextNode","nextNode","focusPreviousNode","previousNode","focusFirstNode","focusLastNode","lastNode","toggle","value","arguments","undefined","prevExpanded","newExpanded","filter","oldTabable","concat","expandAllSiblings","diff","node","oldExpanded","handleLeftArrow","event","flag","preventDefault","stopPropagation","getIndexFirstChars","firstChars","startIndex","char","setFocusByFirstCharacter","start","lowercaseChar","toLowerCase","firstCharIds","Object","entries","_ref","_ref2","firstChar","visible","push","addNodeToNodeMap","childrenIds","currentMap","childId","currentChildMap","removeNodeFromNodeMap","parentMap","parentChildren","c","handleFirstChars","createElement","Provider","icons","role","process","env","NODE_ENV","propTypes","object","string","arrayOf","func","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport TreeViewContext from './TreeViewContext';\nimport { withStyles } from '@material-ui/core/styles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  }\n};\n\nfunction arrayDiff(arr1, arr2) {\n  if (arr1.length !== arr2.length) return true;\n\n  for (var i = 0; i < arr1.length; i += 1) {\n    if (arr1[i] !== arr2[i]) return true;\n  }\n\n  return false;\n}\n\nvar defaultExpandedDefault = [];\nvar TreeView = React.forwardRef(function TreeView(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      defaultCollapseIcon = props.defaultCollapseIcon,\n      defaultEndIcon = props.defaultEndIcon,\n      _props$defaultExpande = props.defaultExpanded,\n      defaultExpanded = _props$defaultExpande === void 0 ? defaultExpandedDefault : _props$defaultExpande,\n      defaultExpandIcon = props.defaultExpandIcon,\n      defaultParentIcon = props.defaultParentIcon,\n      onNodeToggle = props.onNodeToggle,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"defaultCollapseIcon\", \"defaultEndIcon\", \"defaultExpanded\", \"defaultExpandIcon\", \"defaultParentIcon\", \"onNodeToggle\"]);\n\n  var _React$useState = React.useState(defaultExpanded),\n      expanded = _React$useState[0],\n      setExpanded = _React$useState[1];\n\n  var _React$useState2 = React.useState(null),\n      tabable = _React$useState2[0],\n      setTabable = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      focused = _React$useState3[0],\n      setFocused = _React$useState3[1];\n\n  var firstNode = React.useRef(null);\n  var nodeMap = React.useRef({});\n  var firstCharMap = React.useRef({});\n  var isExpanded = React.useCallback(function (id) {\n    return expanded.indexOf(id) !== -1;\n  }, [expanded]);\n\n  var isTabable = function isTabable(id) {\n    return tabable === id;\n  };\n\n  var isFocused = function isFocused(id) {\n    return focused === id;\n  };\n\n  var prevChildIds = React.useRef([]);\n  React.useEffect(function () {\n    var childIds = React.Children.map(children, function (child) {\n      return child.props.nodeId;\n    }) || [];\n\n    if (arrayDiff(prevChildIds.current, childIds)) {\n      nodeMap.current[-1] = {\n        parent: null,\n        children: childIds\n      };\n      childIds.forEach(function (id, index) {\n        if (index === 0) {\n          firstNode.current = id;\n          setTabable(id);\n        }\n\n        nodeMap.current[id] = {\n          parent: null\n        };\n      });\n      prevChildIds.current = childIds;\n    }\n  }, [children]);\n  var getLastNode = React.useCallback(function (id) {\n    var map = nodeMap.current[id];\n\n    if (isExpanded(id) && map.children && map.children.length > 0) {\n      return getLastNode(map.children[map.children.length - 1]);\n    }\n\n    return id;\n  }, [isExpanded]);\n\n  var focus = function focus(id) {\n    if (id) {\n      setTabable(id);\n    }\n\n    setFocused(id);\n  };\n\n  var getNextNode = function getNextNode(id, end) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n\n    if (!end) {\n      if (isExpanded(id)) {\n        return map.children[0];\n      }\n    }\n\n    if (parent) {\n      var nodeIndex = parent.children.indexOf(id);\n      var nextIndex = nodeIndex + 1;\n\n      if (parent.children.length > nextIndex) {\n        return parent.children[nextIndex];\n      }\n\n      return getNextNode(parent.id, true);\n    }\n\n    var topLevelNodes = nodeMap.current[-1].children;\n    var topLevelNodeIndex = topLevelNodes.indexOf(id);\n\n    if (topLevelNodeIndex !== -1 && topLevelNodeIndex !== topLevelNodes.length - 1) {\n      return topLevelNodes[topLevelNodeIndex + 1];\n    }\n\n    return null;\n  };\n\n  var getPreviousNode = function getPreviousNode(id) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n\n    if (parent) {\n      var nodeIndex = parent.children.indexOf(id);\n\n      if (nodeIndex !== 0) {\n        var nextIndex = nodeIndex - 1;\n        return getLastNode(parent.children[nextIndex]);\n      }\n\n      return parent.id;\n    }\n\n    var topLevelNodes = nodeMap.current[-1].children;\n    var topLevelNodeIndex = topLevelNodes.indexOf(id);\n\n    if (topLevelNodeIndex > 0) {\n      return getLastNode(topLevelNodes[topLevelNodeIndex - 1]);\n    }\n\n    return null;\n  };\n\n  var focusNextNode = function focusNextNode(id) {\n    var nextNode = getNextNode(id);\n\n    if (nextNode) {\n      focus(nextNode);\n    }\n  };\n\n  var focusPreviousNode = function focusPreviousNode(id) {\n    var previousNode = getPreviousNode(id);\n\n    if (previousNode) {\n      focus(previousNode);\n    }\n  };\n\n  var focusFirstNode = function focusFirstNode() {\n    if (firstNode.current) {\n      focus(firstNode.current);\n    }\n  };\n\n  var focusLastNode = function focusLastNode() {\n    var topLevelNodes = nodeMap.current[-1].children;\n    var lastNode = getLastNode(topLevelNodes[topLevelNodes.length - 1]);\n    focus(lastNode);\n  };\n\n  var toggle = function toggle() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : focused;\n    setExpanded(function (prevExpanded) {\n      var newExpanded;\n\n      if (prevExpanded.indexOf(value) !== -1) {\n        newExpanded = prevExpanded.filter(function (id) {\n          return id !== value;\n        });\n        setTabable(function (oldTabable) {\n          var map = nodeMap.current[oldTabable];\n\n          if (oldTabable && (map && map.parent ? map.parent.id : null) === value) {\n            return value;\n          }\n\n          return oldTabable;\n        });\n      } else {\n        newExpanded = [value].concat(_toConsumableArray(prevExpanded));\n      }\n\n      if (onNodeToggle) {\n        onNodeToggle(value, newExpanded.indexOf(value) !== -1);\n      }\n\n      return newExpanded;\n    });\n  };\n\n  var expandAllSiblings = function expandAllSiblings(id) {\n    var map = nodeMap.current[id];\n    var parent = nodeMap.current[map.parent];\n    var diff;\n\n    if (parent) {\n      diff = parent.children.filter(function (child) {\n        return !isExpanded(child);\n      });\n    } else {\n      var topLevelNodes = nodeMap.current[-1].children;\n      diff = topLevelNodes.filter(function (node) {\n        return !isExpanded(node);\n      });\n    }\n\n    setExpanded(function (oldExpanded) {\n      return [].concat(_toConsumableArray(oldExpanded), _toConsumableArray(diff));\n    });\n  };\n\n  var handleLeftArrow = function handleLeftArrow(id, event) {\n    var flag = false;\n\n    if (isExpanded(id)) {\n      toggle(id);\n      flag = true;\n    } else {\n      var parent = nodeMap.current[id].parent;\n\n      if (parent) {\n        focus(parent);\n        flag = true;\n      }\n    }\n\n    if (flag && event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  var getIndexFirstChars = function getIndexFirstChars(firstChars, startIndex, char) {\n    for (var i = startIndex; i < firstChars.length; i += 1) {\n      if (char === firstChars[i]) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  var setFocusByFirstCharacter = function setFocusByFirstCharacter(id, char) {\n    var start;\n    var index;\n    var lowercaseChar = char.toLowerCase();\n    var firstCharIds = [];\n    var firstChars = []; // This really only works since the ids are strings\n\n    Object.entries(firstCharMap.current).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          nodeId = _ref2[0],\n          firstChar = _ref2[1];\n\n      var map = nodeMap.current[nodeId];\n      var visible = map.parent ? isExpanded(map.parent) : true;\n\n      if (visible) {\n        firstCharIds.push(nodeId);\n        firstChars.push(firstChar);\n      }\n    }); // Get start index for search based on position of currentItem\n\n    start = firstCharIds.indexOf(id) + 1;\n\n    if (start === nodeMap.current.length) {\n      start = 0;\n    } // Check remaining slots in the menu\n\n\n    index = getIndexFirstChars(firstChars, start, lowercaseChar); // If not found in remaining slots, check from beginning\n\n    if (index === -1) {\n      index = getIndexFirstChars(firstChars, 0, lowercaseChar);\n    } // If match was found...\n\n\n    if (index > -1) {\n      focus(firstCharIds[index]);\n    }\n  };\n\n  var addNodeToNodeMap = function addNodeToNodeMap(id, childrenIds) {\n    var currentMap = nodeMap.current[id];\n    nodeMap.current[id] = _extends({}, currentMap, {\n      children: childrenIds,\n      id: id\n    });\n    childrenIds.forEach(function (childId) {\n      var currentChildMap = nodeMap.current[childId];\n      nodeMap.current[childId] = _extends({}, currentChildMap, {\n        parent: id,\n        id: childId\n      });\n    });\n  };\n\n  var removeNodeFromNodeMap = function removeNodeFromNodeMap(id) {\n    var map = nodeMap.current[id];\n\n    if (map) {\n      if (map.parent) {\n        var parentMap = nodeMap.current[map.parent];\n\n        if (parentMap && parentMap.children) {\n          var parentChildren = parentMap.children.filter(function (c) {\n            return c !== id;\n          });\n          nodeMap.current[map.parent] = _extends({}, parentMap, {\n            children: parentChildren\n          });\n        }\n      }\n\n      delete nodeMap.current[id];\n    }\n  };\n\n  var handleFirstChars = function handleFirstChars(id, firstChar) {\n    firstCharMap.current[id] = firstChar;\n  };\n\n  return React.createElement(TreeViewContext.Provider, {\n    value: {\n      expandAllSiblings: expandAllSiblings,\n      focus: focus,\n      focusFirstNode: focusFirstNode,\n      focusLastNode: focusLastNode,\n      focusNextNode: focusNextNode,\n      focusPreviousNode: focusPreviousNode,\n      handleFirstChars: handleFirstChars,\n      handleLeftArrow: handleLeftArrow,\n      addNodeToNodeMap: addNodeToNodeMap,\n      removeNodeFromNodeMap: removeNodeFromNodeMap,\n      icons: {\n        defaultCollapseIcon: defaultCollapseIcon,\n        defaultExpandIcon: defaultExpandIcon,\n        defaultParentIcon: defaultParentIcon,\n        defaultEndIcon: defaultEndIcon\n      },\n      isExpanded: isExpanded,\n      isFocused: isFocused,\n      isTabable: isTabable,\n      setFocusByFirstCharacter: setFocusByFirstCharacter,\n      toggle: toggle\n    }\n  }, React.createElement(\"ul\", _extends({\n    role: \"tree\",\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeView.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default icon used to collapse the node.\n   */\n  defaultCollapseIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a end node. This is applied to all\n   * tree nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultEndIcon: PropTypes.node,\n\n  /**\n   * Expanded node ids.\n   */\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * The default icon used to expand the node.\n   */\n  defaultExpandIcon: PropTypes.node,\n\n  /**\n   * The default icon displayed next to a parent node. This is applied to all\n   * parent nodes and can be overridden by the TreeItem `icon` prop.\n   */\n  defaultParentIcon: PropTypes.node,\n\n  /**\n   * Callback fired when a `TreeItem` is expanded/collapsed.\n   *\n   * @param {string} nodeId The id of the toggled node.\n   * @param {boolean} expanded The node status - If `true` the node was expanded. If `false` the node was collapsed.\n   */\n  onNodeToggle: PropTypes.func\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTreeView'\n})(TreeView);"]},"metadata":{},"sourceType":"module"}