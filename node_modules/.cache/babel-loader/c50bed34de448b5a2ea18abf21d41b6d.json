{"ast":null,"code":"import { SET_SELECTED_SEATS, SET_SELECTED_CINEMA, SET_SELECTED_DATE, SET_SELECTED_TIME, TOGGLE_LOGIN_POPUP, SHOW_INVITATION_FORM, RESET_CHECKOUT, SET_INVITATION, SET_SUGGESTED_SEATS, SET_QR_CODE } from '../types';\nconst initialState = {\n  selectedSeats: [],\n  suggestedSeat: [],\n  selectedCinema: '',\n  selectedDate: null,\n  selectedTime: '',\n  showLoginPopup: false,\n  showInvitation: false,\n  invitations: {},\n  QRCode: ''\n};\n\nconst setSelectedSeats = (state, seats) => {\n  let newSeats = [];\n  const seatExist = state.selectedSeats.find(seat => JSON.stringify(seat) === JSON.stringify(seats));\n  !seatExist ? newSeats = [...state.selectedSeats, seats] : newSeats = state.selectedSeats.filter(seat => JSON.stringify(seat) !== JSON.stringify(seats));\n  return { ...state,\n    selectedSeats: newSeats\n  };\n};\n\nconst setSuggestedSeats = (state, seats) => {\n  let newSeats = [];\n  newSeats = [...state.suggestedSeat, seats];\n  return { ...state,\n    suggestedSeat: newSeats\n  };\n};\n\nconst setSelectedCinema = (state, selectedCinema) => ({ ...state,\n  selectedCinema\n});\n\nconst setSelectedDate = (state, selectedDate) => ({ ...state,\n  selectedDate\n});\n\nconst setSelectedTime = (state, selectedTime) => ({ ...state,\n  selectedTime\n});\n\nconst setInvitation = (state, event) => {\n  return { ...state,\n    invitations: { ...state.invitations,\n      [event.target.name]: event.target.value\n    }\n  };\n};\n\nconst setQRCode = (state, QRCode) => ({ ...state,\n  QRCode\n});\n\nconst toggleLoginPopup = state => ({ ...state,\n  showLoginPopup: !state.showLoginPopup\n});\n\nconst showInvitationForm = state => ({ ...state,\n  showInvitation: !state.showInvitation\n});\n\nconst resetCheckout = () => initialState;\n\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_SELECTED_SEATS:\n      return setSelectedSeats(state, payload);\n\n    case SET_SUGGESTED_SEATS:\n      return setSuggestedSeats(state, payload);\n\n    case SET_SELECTED_CINEMA:\n      return setSelectedCinema(state, payload);\n\n    case SET_SELECTED_DATE:\n      return setSelectedDate(state, payload);\n\n    case SET_SELECTED_TIME:\n      return setSelectedTime(state, payload);\n\n    case SET_INVITATION:\n      return setInvitation(state, payload);\n\n    case TOGGLE_LOGIN_POPUP:\n      return toggleLoginPopup(state);\n\n    case SHOW_INVITATION_FORM:\n      return showInvitationForm(state);\n\n    case SET_QR_CODE:\n      return setQRCode(state, payload);\n\n    case RESET_CHECKOUT:\n      return resetCheckout();\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/tainguyennguyen/Desktop/final-project/src/store/reducers/checkout.js"],"names":["SET_SELECTED_SEATS","SET_SELECTED_CINEMA","SET_SELECTED_DATE","SET_SELECTED_TIME","TOGGLE_LOGIN_POPUP","SHOW_INVITATION_FORM","RESET_CHECKOUT","SET_INVITATION","SET_SUGGESTED_SEATS","SET_QR_CODE","initialState","selectedSeats","suggestedSeat","selectedCinema","selectedDate","selectedTime","showLoginPopup","showInvitation","invitations","QRCode","setSelectedSeats","state","seats","newSeats","seatExist","find","seat","JSON","stringify","filter","setSuggestedSeats","setSelectedCinema","setSelectedDate","setSelectedTime","setInvitation","event","target","name","value","setQRCode","toggleLoginPopup","showInvitationForm","resetCheckout","action","type","payload"],"mappings":"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","sourcesContent":["import {\n  SET_SELECTED_SEATS,\n  SET_SELECTED_CINEMA,\n  SET_SELECTED_DATE,\n  SET_SELECTED_TIME,\n  TOGGLE_LOGIN_POPUP,\n  SHOW_INVITATION_FORM,\n  RESET_CHECKOUT,\n  SET_INVITATION,\n  SET_SUGGESTED_SEATS,\n  SET_QR_CODE\n} from '../types';\n\nconst initialState = {\n  selectedSeats: [],\n  suggestedSeat: [],\n  selectedCinema: '',\n  selectedDate: null,\n  selectedTime: '',\n  showLoginPopup: false,\n  showInvitation: false,\n  invitations: {},\n  QRCode: ''\n};\n\nconst setSelectedSeats = (state, seats) => {\n  let newSeats = [];\n  const seatExist = state.selectedSeats.find(\n    seat => JSON.stringify(seat) === JSON.stringify(seats)\n  );\n  !seatExist\n    ? (newSeats = [...state.selectedSeats, seats])\n    : (newSeats = state.selectedSeats.filter(\n        seat => JSON.stringify(seat) !== JSON.stringify(seats)\n      ));\n\n  return {\n    ...state,\n    selectedSeats: newSeats\n  };\n};\n\nconst setSuggestedSeats = (state, seats) => {\n  let newSeats = [];\n\n  newSeats = [...state.suggestedSeat, seats];\n\n  return {\n    ...state,\n    suggestedSeat: newSeats\n  };\n};\n\nconst setSelectedCinema = (state, selectedCinema) => ({\n  ...state,\n  selectedCinema\n});\nconst setSelectedDate = (state, selectedDate) => ({\n  ...state,\n  selectedDate\n});\n\nconst setSelectedTime = (state, selectedTime) => ({\n  ...state,\n  selectedTime\n});\n\nconst setInvitation = (state, event) => {\n  return {\n    ...state,\n    invitations: {\n      ...state.invitations,\n      [event.target.name]: event.target.value\n    }\n  };\n};\n\nconst setQRCode = (state, QRCode) => ({\n  ...state,\n  QRCode\n});\n\nconst toggleLoginPopup = state => ({\n  ...state,\n  showLoginPopup: !state.showLoginPopup\n});\nconst showInvitationForm = state => ({\n  ...state,\n  showInvitation: !state.showInvitation\n});\nconst resetCheckout = () => initialState;\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_SELECTED_SEATS:\n      return setSelectedSeats(state, payload);\n    case SET_SUGGESTED_SEATS:\n      return setSuggestedSeats(state, payload);\n    case SET_SELECTED_CINEMA:\n      return setSelectedCinema(state, payload);\n    case SET_SELECTED_DATE:\n      return setSelectedDate(state, payload);\n    case SET_SELECTED_TIME:\n      return setSelectedTime(state, payload);\n    case SET_INVITATION:\n      return setInvitation(state, payload);\n    case TOGGLE_LOGIN_POPUP:\n      return toggleLoginPopup(state);\n    case SHOW_INVITATION_FORM:\n      return showInvitationForm(state);\n    case SET_QR_CODE:\n      return setQRCode(state, payload);\n    case RESET_CHECKOUT:\n      return resetCheckout();\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}